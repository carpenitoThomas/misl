cat_method = c("Lrnr_mean", "Lrnr_independent_binomial"))
# We can then begin the fitting process
mean_fit <- with(mean_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
mice_fit <- with(mice_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
misl_fit <- lapply(misl_imputations, function(y){
stats::lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = y)
})
# The results can be pooled
mean_pool <- summary(mice::pool(mean_fit), conf.int = TRUE)
mice_pool <- summary(mice::pool(mice_fit), conf.int = TRUE)
misl_pool <- summary(mice::pool(misl_fit), conf.int = TRUE)
# Finally, we can append our results to the array
results[1, run,] <- as.numeric(mean_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[2, run,] <- as.numeric(mice_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[3, run,] <- as.numeric(misl_pool[4, c("estimate", "2.5 %", "97.5 %")])
}
results
}
start_multisession <- Sys.time()
simulation_results_multisession <- simulation(1, multisession = TRUE)
end_multisession <- Sys.time()
start_sequential <- Sys.time()
simulation_results_sequential <- simulation(1, multisession = FALSE)
end_sequential <- Sys.time()
elapsed_time_paralell <- end_multisession - start_multisession
elapsed_time_no_paralell <- end_sequential - start_sequential
remotes::install_github("tlverse/sl3")
?rev
?as.factor
?base::factor()
?factor
?as.factor
generics::as.factor
generics::as.factor()
?generics::as.factor()
?base::as.factor()
session_info()
?session_info()
?read.csv
?default.stringsAsFactors
session_info()
library('mice')
library('misl')
library('dplyr')
library("sl3")
session_info()
library("packrat")
packrat::status()
source("/Users/thomascarpenito/Documents/Northeastern/Dissertation/MISL Paper/cluster/testing_misl.R")
setwd("/Users/thomascarpenito/Documents/Northeastern/Dissertation/MISL Paper/cluster/")
source("testing_misl.R")
source("testing_misl.R")
# The purpose of this document is to test out the misl simulations using the abalone data.
# First, prepare the abalone data
library('mice')
library('misl')
library('dplyr')
library("sl3")
abalone <- read.csv("abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
dplyr::mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- dplyr::tibble(abalone)
## 1. Generate a linear model predicting the outcome of interest
#### Whole_Weight = Sex + Length + Diameter + Height +  Older_12
original_model <- lm(Whole_Weight ~ Length + Diameter + Height + Older_12, data = abalone)
predictions <- predict(original_model)
## 2. Replace the outcome with the predicted values from the model
abalone_model_predictions <- abalone %>%
select(c(Length, Diameter, Height, Older_12))
abalone_model_predictions$Whole_Weight_Pred <- predictions
truth_model <- lm(Whole_Weight_Pred ~ Length + Diameter + Height + Older_12, data = abalone_model_predictions)
mypatterns <- expand.grid(Length = 0:1, Diameter = 0:1, Height = 0:1, Older_12 = 0:1, Whole_Weight_Pred = 0:1)
mypatterns <- mypatterns[rowSums(mypatterns) != 0,]
## 3. Begin a loop (1000 times that...)
simulation <- function(runs = 2, multisession = FALSE){
# First, setup our results array
results <- array(NA, dim = c(3, runs, 3 ))
dimnames(results) <- list(c("Mean.Imp", "Mice.Imp", "Misl.Imp"),
as.character(1:runs),
c("Estimate", "2.5 %", "97.5 %")
)
# Next begin our run through each of the simulations
for(run in 1:runs){
# We begin first with amputing our data
amputed_mads <- ampute(abalone_model_predictions,
prop = .60,
patterns = mypatterns,
mech = "MCAR")
# We can then begin the imputation
amputed_data <- amputed_mads$amp
mean_imputations <- mice(amputed_data, method = "mean")
mice_imputations <- mice(amputed_data)
misl_imputations <- misl(amputed_data,
multisession = multisession,
maxit = 5,
nworkers = 12,
con_method = c("Lrnr_mean", "Lrnr_glm", "Lrnr_randomForest"),
bin_method = c("Lrnr_mean", "Lrnr_glm", "Lrnr_randomForest" ),
cat_method = c("Lrnr_mean", "Lrnr_independent_binomial"))
# We can then begin the fitting process
mean_fit <- with(mean_imputations, exp = lm(Whole_Weight_Pred ~ Length + Diameter + Height + Older_12))
mice_fit <- with(mice_imputations, exp = lm(Whole_Weight_Pred ~ Length + Diameter + Height + Older_12))
misl_fit <- lapply(misl_imputations, function(y){
stats::lm(Whole_Weight_Pred ~ Length + Diameter + Height + Older_12, data = y)
})
# The results can be pooled
mean_pool <- summary(mice::pool(mean_fit), conf.int = TRUE)
mice_pool <- summary(mice::pool(mice_fit), conf.int = TRUE)
misl_pool <- summary(mice::pool(misl_fit), conf.int = TRUE)
# Finally, we can append our results to the array
results[1, run,] <- as.numeric(mean_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[2, run,] <- as.numeric(mice_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[3, run,] <- as.numeric(misl_pool[4, c("estimate", "2.5 %", "97.5 %")])
}
results
}
start_multisession <- Sys.time()
simulation_results_multisession <- simulation(1, multisession = TRUE)
end_multisession <- Sys.time()
start_sequential <- Sys.time()
simulation_results_sequential <- simulation(1, multisession = FALSE)
end_sequential <- Sys.time()
elapsed_time_paralell <- end_multisession - start_multisession
elapsed_time_no_paralell <- end_sequential - start_sequential
save(simulation_results_multisession, simulation_results_sequential, file = "time_trial.Rdata")
.libPaths()
?.libpaths
?.libPaths
system.time()
library("future")
?future
future::nbrOfWorkers()
R.Version()
x <- data.frame(matrix(runif(100*1e4), ncol = 100))
x <- data.frame(matrix(runif(100*1e5), ncol = 100))
system.time(a <- x)
nrow(abalone)
load_all()
library("devtools")
library("abalone")
nrow(abalone)
load_all()
nrow("abalone")
nrow(abalone)
nrow(nhanes)
ncol(nhanes)
ncol(abalone)
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
library("future")
availableCores()
availableWorkers()
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
?tweak
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
availableCores() %/% 4
availableCores()
load_all()
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
future::plan(list(future::tweak(future::sequential), future::tweak(future::multisession, workers = 4)))
plan()
?plan
plan(list(
tweak(multisession, workers = availableCores() %/% 4),
tweak(multisession, workers = 4)
))
plan
plan()
future::plan(list(future::tweak(future::sequential), future::tweak(future::multisession, workers = 4)))
plan()
?install_github
Sys.getenv()
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
setwd("/Users/thomascarpenito/Desktop/benchmarks/")
library('tidyverse')
library("sl3")
library("delayed")
library("future")
abalone <- read.csv("raw-data/abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- as_tibble(abalone)
sl3_list_learners("categorical")
cat_outcome <- "Sex"
cat_covars <- colnames(abalone)[-which(names(abalone) == cat_outcome)]
cat_task <- make_sl3_Task(
data = abalone,
covariates = cat_covars,
outcome = cat_outcome
)
cat_lrnr_glmnet <- make_learner(Lrnr_glmnet)
cat_lrnr_mean <- make_learner(Lrnr_mean)
cat_lrnr_randomforest <- make_learner(Lrnr_randomForest)
cat_lrnr_ranger <- make_learner(Lrnr_ranger)
cat_stack_learners <- make_learner(
Stack,
cat_lrnr_glmnet,
cat_lrnr_mean,
cat_lrnr_randomforest,
cat_lrnr_ranger
)
cat_stack <- Lrnr_sl$new(
learners = cat_stack_learners
)
?Lrnr_sl
?Stack
library('tidyverse')
library("sl3")
library("delayed")
library("future")
abalone <- read.csv("raw-data/abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- as_tibble(abalone)
sl3_list_learners("categorical")
cat_outcome <- "Sex"
cat_covars <- colnames(abalone)[-which(names(abalone) == cat_outcome)]
cat_task <- make_sl3_Task(
data = abalone,
covariates = cat_covars,
outcome = cat_outcome
)
cat_lrnr_glmnet <- make_learner(Lrnr_glmnet)
cat_lrnr_mean <- make_learner(Lrnr_mean)
cat_lrnr_randomforest <- make_learner(Lrnr_randomForest)
cat_lrnr_ranger <- make_learner(Lrnr_ranger)
cat_stack_learners <- make_learner(
Stack,
cat_lrnr_glmnet,
cat_lrnr_mean,
cat_lrnr_randomforest,
cat_lrnr_ranger
)
cat_stack <- Lrnr_sl$new(
learners = cat_stack_learners
)
system.time({cat_fit <- cat_stack$train(cat_task)})
abalone
library('tidyverse')
library("sl3")
library("delayed")
library("future")
abalone <- read.csv("raw-data/abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- as_tibble(abalone)
sl3_list_learners("categorical")
cat_outcome <- "Sex"
cat_covars <- colnames(abalone)[-which(names(abalone) == cat_outcome)]
cat_task <- make_sl3_Task(
data = abalone,
covariates = cat_covars,
outcome = cat_outcome
)
cat_lrnr_glmnet <- make_learner(Lrnr_glmnet)
cat_lrnr_mean <- make_learner(Lrnr_mean)
cat_lrnr_randomforest <- make_learner(Lrnr_randomForest)
cat_lrnr_ranger <- make_learner(Lrnr_ranger)
cat_stack_learners <- make_learner(
Stack,
cat_lrnr_glmnet,
cat_lrnr_mean,
cat_lrnr_randomforest
)
cat_stack <- Lrnr_sl$new(
learners = cat_stack_learners
)
system.time({cat_fit <- cat_stack$train(cat_task)})
library('tidyverse')
library("sl3")
library("delayed")
library("future")
abalone <- read.csv("raw-data/abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- as_tibble(abalone)
sl3_list_learners("categorical")
cat_outcome <- "Sex"
cat_covars <- colnames(abalone)[-which(names(abalone) == cat_outcome)]
cat_task <- make_sl3_Task(
data = abalone,
covariates = cat_covars,
outcome = cat_outcome
)
cat_lrnr_glmnet <- make_learner(Lrnr_glmnet)
cat_lrnr_mean <- make_learner(Lrnr_mean)
cat_lrnr_randomforest1 <- make_learner(Lrnr_randomForest)
cat_lrnr_randomforest2 <- make_learner(Lrnr_randomForest)
cat_lrnr_randomforest3 <- make_learner(Lrnr_randomForest)
cat_lrnr_ranger <- make_learner(Lrnr_ranger)
cat_stack_learners <- make_learner(
Stack,
cat_lrnr_glmnet,
cat_lrnr_mean,
cat_lrnr_randomforest1,
cat_lrnr_randomforest2,
cat_lrnr_randomforest3
)
cat_stack <- Lrnr_sl$new(
learners = cat_stack_learners
)
system.time({cat_fit <- cat_stack$train(cat_task)})
original_sl3 <- system.time({cat_fit <- cat_stack$train(cat_task)})
original_sl3
## Using Sequential (no paralell)
sequential_test <- delayed_learner_train(cat_stack, cat_task)
time_sl3_native_sequential <- system.time({
sched <- Scheduler$new(sequential_test, SequentialJob)
cv_fit <- sched$compute()
})
time_sl3_native_sequential
## Using Multicore (paralell)
cpus_physical <- as.numeric(system("sysctl -n hw.physicalcpu", intern = TRUE))
cpus_physical
multicore_test <- delayed_learner_train(cat_stack, cat_task)
time_sl3_native_multicore <- system.time({
sched <- Scheduler$new(multicore_test, FutureJob, nworkers = cpus_physical,
verbose = FALSE)
cv_fit <- sched$compute()
})
time_sl3_native_multicore
## Using Multicore
cpus_physical <- as.numeric(system("sysctl -n hw.physicalcpu", intern = TRUE))
plan(multisession, workers = cpus_physical)
multicore_test <- delayed_learner_train(cat_stack, cat_task)
time_sl3_native_multicore <- system.time({
sched <- Scheduler$new(multicore_test, FutureJob, nworkers = cpus_physical,
verbose = FALSE)
cv_fit <- sched$compute()
})
time_sl3_native_multicore
## Using Multicore with hyperthreading
cpus_logical <- as.numeric(system("sysctl -n hw.logicalcpu", intern = TRUE))
cpus_logical
## Using Multicore with hyperthreading
cpus_logical <- as.numeric(system("sysctl -n hw.logicalcpu", intern = TRUE))
plan(multisession, workers = cpus_logical)
multisession_hypterthreading_test <- delayed_learner_train(cat_stack, cat_task)
time_sl3_native_multisession_ht <- system.time({
sched <- Scheduler$new(multisession_hypterthreading_test, FutureJob, nworkers = cpus_logical,
verbose = FALSE)
cv_fit <- sched$compute()
})
time_sl3_native_multisession_ht
sl3::delayed_learner_train(cat_stack, cat_task)
?SequentialJob
?Scheduler
?FutureJob
load("/Users/thomascarpenito/Downloads/time_sl3_native_multisession_4.Rdata")
load("/Users/thomascarpenito/Downloads/time_sl3_native_multisession_12.Rdata")
load("/Users/thomascarpenito/Downloads/time_sl3_native_multisession_4.Rdata")
load("/Users/thomascarpenito/Downloads/time_sl3_native_multisession_8.Rdata")
load("/Users/thomascarpenito/Downloads/time_sl3_native_multisession_24.Rdata")
load("/Users/thomascarpenito/Downloads/time_sl3_native_multisession_16.Rdata")
time_sl3_native_multisession_4
time_sl3_native_multisession_8
time_sl3_native_multisession_12
time_sl3_native_multisession_16
time_sl3_native_multisession_24
load("/Users/thomascarpenito/Downloads/single_core_8.Rdata")
load("/Users/thomascarpenito/Downloads/single_core_4.Rdata")
load("/Users/thomascarpenito/Downloads/single_core_12.Rdata")
load("/Users/thomascarpenito/Downloads/single_core.Rdata")
load("/Users/thomascarpenito/Downloads/single_core_16.Rdata")
single_core
single_core_4
single_core_8
single_core_12
single_core_16
load("/Users/thomascarpenito/Downloads/time_sl3_native_multisession_8.Rdata")
load("/Users/thomascarpenito/Downloads/time_sl3_native_multisession_4.Rdata")
load("/Users/thomascarpenito/Downloads/time_sl3_native_multisession_24.Rdata")
load("/Users/thomascarpenito/Downloads/time_sl3_native_multisession_12.Rdata")
load("/Users/thomascarpenito/Downloads/time_sl3_native_multisession_16.Rdata")
time_sl3_native_multisession_4
time_sl3_native_multisession_8
time_sl3_native_multisession_12
time_sl3_native_multisession_16
ttime_sl3_native_multisession_24
time_sl3_native_multisession_24
cat_covars
# The purpose of this document is to test out the misl simulations using the abalone data.
# First, prepare the abalone data
.libPaths("/home/t.carpenito/dissertation/packrat/lib/x86_64-pc-linux-gnu/3.6.2")
library('tidyverse')
library("sl3")
library("delayed")
library("future")
abalone <- read.csv("abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- as_tibble(abalone)
sl3_list_learners("categorical")
cat_outcome <- "Sex"
cat_covars <- colnames(abalone)[-which(names(abalone) == cat_outcome)]
abalone <- read.csv("raw_data/abalone.data", header=FALSE)
abalone <- read.csv("raw-data/abalone.data", header=FALSE)
# The purpose of this document is to test out the misl simulations using the abalone data.
# First, prepare the abalone data
.libPaths("/home/t.carpenito/dissertation/packrat/lib/x86_64-pc-linux-gnu/3.6.2")
library('tidyverse')
library("sl3")
library("delayed")
library("future")
abalone <- read.csv("abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- as_tibble(abalone)
sl3_list_learners("categorical")
cat_outcome <- "Sex"
cat_covars <- colnames(abalone)[-which(names(abalone) == cat_outcome)]
cat_covars
library("devtools")
getwd()
library(misl)
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = FALSE)})
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = FALSE)})
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = TRUE)})
load_all()
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = FALSE)})
library('sl3')
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = FALSE)})
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = TRUE)})
as.numeric(system("sysctl -n hw.physicalcpu", intern = TRUE))
?plan
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = FALSE, multisession = FALSE)})
!FALSE
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = FALSE, multisession = TRUE)})
load_all()
load_all()
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = FALSE)})
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = FALSE)})
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 2, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 5, quiet = TRUE, multisession = TRUE)})
library('future')
plan(multisession, 4)
plan(multisession, 4)
future::plan(future::multisession, workers = nworkers)
future::plan(future::multisession, workers = 8)
future::plan(future::multisession, workers = 8)
System.time(future::plan(future::multisession, workers = 8))
system.time(future::plan(future::multisession, workers = 8))
load_all()
## This is after single plan
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 5, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 2, quiet = TRUE, multisession = TRUE)})
?future
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 1, m = 1, quiet = TRUE, multisession = TRUE)})
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 1, m = 1, quiet = TRUE, multisession = TRUE)})
misl_imp
load_all()
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = TRUE)})
load_all()
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
