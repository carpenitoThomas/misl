simulation <- function(runs = 2, multisession = FALSE){
# First, setup our results array
results <- array(NA, dim = c(3, runs, 3 ))
dimnames(results) <- list(c("Mean.Imp", "Mice.Imp", "Misl.Imp"),
as.character(1:runs),
c("Estimate", "2.5 %", "97.5 %")
)
# Next begin our run through each of the simulations
for(run in 1:runs){
# We begin first with amputing our data
amputed_mads <- ampute(abalone_model_predictions,
prop = .60,
patterns = mypatterns,
mech = "MCAR")
# We can then begin the imputation
amputed_data <- amputed_mads$amp
mean_imputations <- mice(amputed_data, method = "mean")
mice_imputations <- mice(amputed_data)
misl_imputations <- misl(amputed_data,
multisession = multisession,
nworkers = 12,
con_method = c("Lrnr_mean", "Lrnr_glm", "Lrnr_xgboost", "Lrnr_randomForest"),
bin_method = c("Lrnr_mean", "Lrnr_xgboost", "Lrnr_glm", "Lrnr_randomForest" ),
cat_method = c("Lrnr_mean", "Lrnr_independent_binomial"))
# We can then begin the fitting process
mean_fit <- with(mean_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
mice_fit <- with(mice_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
misl_fit <- lapply(misl_imputations, function(y){
stats::lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = y)
})
# The results can be pooled
mean_pool <- summary(mice::pool(mean_fit), conf.int = TRUE)
mice_pool <- summary(mice::pool(mice_fit), conf.int = TRUE)
misl_pool <- summary(mice::pool(misl_fit), conf.int = TRUE)
# Finally, we can append our results to the array
results[1, run,] <- as.numeric(mean_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[2, run,] <- as.numeric(mice_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[3, run,] <- as.numeric(misl_pool[4, c("estimate", "2.5 %", "97.5 %")])
}
results
}
start_multisession <- Sys.time()
simulation_results_multisession <- simulation(1, multisession = TRUE)
end_multisession <- Sys.time()
start_sequential <- Sys.time()
simulation_results_sequential <- simulation(1, multisession = FALSE)
end_sequential <- Sys.time()
elapsed_time_paralell <- end_multisession - start_multisession
elapsed_time_no_paralell <- end_sequential - start_sequential
save(simulation_results_multisession, simulation_results_sequential, file = "time_trial.Rdata")
library("misl")
load_all()
# The purpose of this document is to test out the misl simulations using the abalone data.
# First, prepare the abalone data
library('misl')
library('tidyverse')
library("sl3")
library('mice')
abalone <- read.csv("abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- as_tibble(abalone)
## 1. Generate a linear model predicting the outcome of interest
#### Whole_Weight = Sex + Length + Diameter + Height +  Older_12
original_model <- lm(Whole_Weight ~ Sex + Length + Diameter + Height + Older_12, data = abalone)
predictions <- predict(original_model)
## 2. Replace the outcome with the predicted values from the model
abalone_model_predictions <- abalone %>%
select(c(Sex, Length, Diameter, Height, Older_12))
abalone_model_predictions$Whole_Weight_Pred <- predictions
truth_model <- lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = abalone_model_predictions)
mypatterns <- expand.grid(Sex = 0:1, Length = 0:1, Diameter = 0:1, Height = 0:1, Older_12 = 0:1, Whole_Weight_Pred = 0:1)
mypatterns <- mypatterns[rowSums(mypatterns) != 0,]
## 3. Begin a loop (1000 times that...)
simulation <- function(runs = 2, multisession = FALSE){
# First, setup our results array
results <- array(NA, dim = c(3, runs, 3 ))
dimnames(results) <- list(c("Mean.Imp", "Mice.Imp", "Misl.Imp"),
as.character(1:runs),
c("Estimate", "2.5 %", "97.5 %")
)
# Next begin our run through each of the simulations
for(run in 1:runs){
# We begin first with amputing our data
amputed_mads <- ampute(abalone_model_predictions,
prop = .60,
patterns = mypatterns,
mech = "MCAR")
# We can then begin the imputation
amputed_data <- amputed_mads$amp
mean_imputations <- mice(amputed_data, method = "mean")
mice_imputations <- mice(amputed_data)
misl_imputations <- misl(amputed_data,
multisession = multisession,
nworkers = 12,
con_method = c("Lrnr_mean", "Lrnr_glm", "Lrnr_xgboost", "Lrnr_randomForest"),
bin_method = c("Lrnr_mean", "Lrnr_xgboost", "Lrnr_glm", "Lrnr_randomForest" ),
cat_method = c("Lrnr_mean", "Lrnr_independent_binomial"))
# We can then begin the fitting process
mean_fit <- with(mean_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
mice_fit <- with(mice_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
misl_fit <- lapply(misl_imputations, function(y){
stats::lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = y)
})
# The results can be pooled
mean_pool <- summary(mice::pool(mean_fit), conf.int = TRUE)
mice_pool <- summary(mice::pool(mice_fit), conf.int = TRUE)
misl_pool <- summary(mice::pool(misl_fit), conf.int = TRUE)
# Finally, we can append our results to the array
results[1, run,] <- as.numeric(mean_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[2, run,] <- as.numeric(mice_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[3, run,] <- as.numeric(misl_pool[4, c("estimate", "2.5 %", "97.5 %")])
}
results
}
start_multisession <- Sys.time()
simulation_results_multisession <- simulation(1, multisession = TRUE)
end_multisession <- Sys.time()
start_sequential <- Sys.time()
simulation_results_sequential <- simulation(1, multisession = FALSE)
end_sequential <- Sys.time()
elapsed_time_paralell <- end_multisession - start_multisession
elapsed_time_no_paralell <- end_sequential - start_sequential
save(simulation_results_multisession, simulation_results_sequential, file = "time_trial.Rdata")
?as.factor
library('misl')
library('tidyverse')
library("sl3")
library('mice')
abalone <- read.csv("abalone.data", header=FALSE)
abalone <- read.csv("../raw-data/abalone.data", header=FALSE)
getwd()
abalone <- read.csv("raw-data/abalone.data", header=FALSE)
ls
ls()
pwd
getwd()
abalone <- read.csv("/Users/thomascarpenito/Documents/Northeastern/Dissertation/MISL Paper/raw-data/abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- as_tibble(abalone)
original_model <- lm(Whole_Weight ~ Sex + Length + Diameter + Height + Older_12, data = abalone)
predictions <- predict(original_model)
abalone_model_predictions <- abalone %>%
select(c(Sex, Length, Diameter, Height, Older_12))
abalone_model_predictions$Whole_Weight_Pred <- predictions
truth_model <- lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = abalone_model_predictions)
mypatterns <- expand.grid(Sex = 0:1, Length = 0:1, Diameter = 0:1, Height = 0:1, Older_12 = 0:1, Whole_Weight_Pred = 0:1)
mypatterns <- mypatterns[rowSums(mypatterns) != 0,]
simulation <- function(runs = 2, multisession = FALSE){
# First, setup our results array
results <- array(NA, dim = c(3, runs, 3 ))
dimnames(results) <- list(c("Mean.Imp", "Mice.Imp", "Misl.Imp"),
as.character(1:runs),
c("Estimate", "2.5 %", "97.5 %")
)
# Next begin our run through each of the simulations
for(run in 1:runs){
# We begin first with amputing our data
amputed_mads <- ampute(abalone_model_predictions,
prop = .60,
patterns = mypatterns,
mech = "MCAR")
# We can then begin the imputation
amputed_data <- amputed_mads$amp
mean_imputations <- mice(amputed_data, method = "mean")
mice_imputations <- mice(amputed_data)
misl_imputations <- misl(amputed_data,
multisession = multisession,
nworkers = 12,
con_method = c("Lrnr_mean", "Lrnr_glm", "Lrnr_xgboost", "Lrnr_randomForest"),
bin_method = c("Lrnr_mean", "Lrnr_xgboost", "Lrnr_glm", "Lrnr_randomForest" ),
cat_method = c("Lrnr_mean", "Lrnr_independent_binomial"))
# We can then begin the fitting process
mean_fit <- with(mean_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
mice_fit <- with(mice_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
misl_fit <- lapply(misl_imputations, function(y){
stats::lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = y)
})
# The results can be pooled
mean_pool <- summary(mice::pool(mean_fit), conf.int = TRUE)
mice_pool <- summary(mice::pool(mice_fit), conf.int = TRUE)
misl_pool <- summary(mice::pool(misl_fit), conf.int = TRUE)
# Finally, we can append our results to the array
results[1, run,] <- as.numeric(mean_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[2, run,] <- as.numeric(mice_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[3, run,] <- as.numeric(misl_pool[4, c("estimate", "2.5 %", "97.5 %")])
}
results
}
start_multisession <- Sys.time()
simulation_results_multisession <- simulation(1, multisession = TRUE)
?as.tibble
?tibble()
abalone <- abalone %>%
dplyr::mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
library('misl')
library('dplyr')
library("sl3")
library('mice')
abalone <- abalone %>%
dplyr::mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
?mutate
library('misl')
library('dplyr')
library("sl3")
library('mice')
print("HERE0")
abalone <- read.csv("abalone.data", header=FALSE)
abalone <- read.csv("/Users/thomascarpenito/Documents/Northeastern/Dissertation/MISL Paper/raw-data/abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
dplyr::mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
print("HERE0")
library('mice')
library("sl3")
# The purpose of this document is to test out the misl simulations using the abalone data.
# First, prepare the abalone data
library('mice')
library('misl')
library('dplyr')
library("sl3")
abalone <- read.csv("abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
dplyr::mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- dplyr::tibble(abalone)
## 1. Generate a linear model predicting the outcome of interest
#### Whole_Weight = Sex + Length + Diameter + Height +  Older_12
original_model <- lm(Whole_Weight ~ Sex + Length + Diameter + Height + Older_12, data = abalone)
predictions <- predict(original_model)
## 2. Replace the outcome with the predicted values from the model
abalone_model_predictions <- abalone %>%
select(c(Sex, Length, Diameter, Height, Older_12))
abalone_model_predictions$Whole_Weight_Pred <- predictions
truth_model <- lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = abalone_model_predictions)
mypatterns <- expand.grid(Sex = 0:1, Length = 0:1, Diameter = 0:1, Height = 0:1, Older_12 = 0:1, Whole_Weight_Pred = 0:1)
mypatterns <- mypatterns[rowSums(mypatterns) != 0,]
## 3. Begin a loop (1000 times that...)
simulation <- function(runs = 2, multisession = FALSE){
# First, setup our results array
results <- array(NA, dim = c(3, runs, 3 ))
dimnames(results) <- list(c("Mean.Imp", "Mice.Imp", "Misl.Imp"),
as.character(1:runs),
c("Estimate", "2.5 %", "97.5 %")
)
# Next begin our run through each of the simulations
for(run in 1:runs){
# We begin first with amputing our data
amputed_mads <- ampute(abalone_model_predictions,
prop = .60,
patterns = mypatterns,
mech = "MCAR")
# We can then begin the imputation
amputed_data <- amputed_mads$amp
mean_imputations <- mice(amputed_data, method = "mean")
mice_imputations <- mice(amputed_data)
misl_imputations <- misl(amputed_data,
multisession = multisession,
nworkers = 12,
con_method = c("Lrnr_mean", "Lrnr_glm", "Lrnr_randomForest"),
bin_method = c("Lrnr_mean", "Lrnr_glm", "Lrnr_randomForest" ),
cat_method = c("Lrnr_mean", "Lrnr_independent_binomial"))
# We can then begin the fitting process
mean_fit <- with(mean_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
mice_fit <- with(mice_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
misl_fit <- lapply(misl_imputations, function(y){
stats::lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = y)
})
# The results can be pooled
mean_pool <- summary(mice::pool(mean_fit), conf.int = TRUE)
mice_pool <- summary(mice::pool(mice_fit), conf.int = TRUE)
misl_pool <- summary(mice::pool(misl_fit), conf.int = TRUE)
# Finally, we can append our results to the array
results[1, run,] <- as.numeric(mean_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[2, run,] <- as.numeric(mice_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[3, run,] <- as.numeric(misl_pool[4, c("estimate", "2.5 %", "97.5 %")])
}
results
}
start_multisession <- Sys.time()
simulation_results_multisession <- simulation(1, multisession = TRUE)
end_multisession <- Sys.time()
start_sequential <- Sys.time()
simulation_results_sequential <- simulation(1, multisession = FALSE)
end_sequential <- Sys.time()
elapsed_time_paralell <- end_multisession - start_multisession
elapsed_time_no_paralell <- end_sequential - start_sequential
save(simulation_results_multisession, simulation_results_sequential, file = "time_trial.Rdata")
load_all()
library("devtools")
load_all()
library('mice')
library('misl')
library('dplyr')
library("sl3")
session_info()
load_all()
# The purpose of this document is to test out the misl simulations using the abalone data.
# First, prepare the abalone data
library('mice')
library('misl')
library('dplyr')
library("sl3")
abalone <- read.csv("abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
dplyr::mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- dplyr::tibble(abalone)
## 1. Generate a linear model predicting the outcome of interest
#### Whole_Weight = Sex + Length + Diameter + Height +  Older_12
original_model <- lm(Whole_Weight ~ Sex + Length + Diameter + Height + Older_12, data = abalone)
predictions <- predict(original_model)
## 2. Replace the outcome with the predicted values from the model
abalone_model_predictions <- abalone %>%
select(c(Sex, Length, Diameter, Height, Older_12))
abalone_model_predictions$Whole_Weight_Pred <- predictions
truth_model <- lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = abalone_model_predictions)
mypatterns <- expand.grid(Sex = 0:1, Length = 0:1, Diameter = 0:1, Height = 0:1, Older_12 = 0:1, Whole_Weight_Pred = 0:1)
mypatterns <- mypatterns[rowSums(mypatterns) != 0,]
## 3. Begin a loop (1000 times that...)
simulation <- function(runs = 2, multisession = FALSE){
# First, setup our results array
results <- array(NA, dim = c(3, runs, 3 ))
dimnames(results) <- list(c("Mean.Imp", "Mice.Imp", "Misl.Imp"),
as.character(1:runs),
c("Estimate", "2.5 %", "97.5 %")
)
# Next begin our run through each of the simulations
for(run in 1:runs){
# We begin first with amputing our data
amputed_mads <- ampute(abalone_model_predictions,
prop = .60,
patterns = mypatterns,
mech = "MCAR")
# We can then begin the imputation
amputed_data <- amputed_mads$amp
mean_imputations <- mice(amputed_data, method = "mean")
mice_imputations <- mice(amputed_data)
misl_imputations <- misl(amputed_data,
multisession = multisession,
nworkers = 12,
con_method = c("Lrnr_mean", "Lrnr_glm", "Lrnr_randomForest"),
bin_method = c("Lrnr_mean", "Lrnr_glm", "Lrnr_randomForest" ),
cat_method = c("Lrnr_mean", "Lrnr_independent_binomial"))
# We can then begin the fitting process
mean_fit <- with(mean_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
mice_fit <- with(mice_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
misl_fit <- lapply(misl_imputations, function(y){
stats::lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = y)
})
# The results can be pooled
mean_pool <- summary(mice::pool(mean_fit), conf.int = TRUE)
mice_pool <- summary(mice::pool(mice_fit), conf.int = TRUE)
misl_pool <- summary(mice::pool(misl_fit), conf.int = TRUE)
# Finally, we can append our results to the array
results[1, run,] <- as.numeric(mean_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[2, run,] <- as.numeric(mice_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[3, run,] <- as.numeric(misl_pool[4, c("estimate", "2.5 %", "97.5 %")])
}
results
}
start_multisession <- Sys.time()
simulation_results_multisession <- simulation(1, multisession = TRUE)
end_multisession <- Sys.time()
start_sequential <- Sys.time()
simulation_results_sequential <- simulation(1, multisession = FALSE)
end_sequential <- Sys.time()
elapsed_time_paralell <- end_multisession - start_multisession
elapsed_time_no_paralell <- end_sequential - start_sequential
remotes::install_github("tlverse/sl3")
?rev
?as.factor
?base::factor()
?factor
?as.factor
generics::as.factor
generics::as.factor()
?generics::as.factor()
?base::as.factor()
session_info()
?session_info()
?read.csv
?default.stringsAsFactors
session_info()
library('mice')
library('misl')
library('dplyr')
library("sl3")
session_info()
library("packrat")
packrat::status()
source("/Users/thomascarpenito/Documents/Northeastern/Dissertation/MISL Paper/cluster/testing_misl.R")
setwd("/Users/thomascarpenito/Documents/Northeastern/Dissertation/MISL Paper/cluster/")
source("testing_misl.R")
source("testing_misl.R")
# The purpose of this document is to test out the misl simulations using the abalone data.
# First, prepare the abalone data
library('mice')
library('misl')
library('dplyr')
library("sl3")
abalone <- read.csv("abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
dplyr::mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- dplyr::tibble(abalone)
## 1. Generate a linear model predicting the outcome of interest
#### Whole_Weight = Sex + Length + Diameter + Height +  Older_12
original_model <- lm(Whole_Weight ~ Length + Diameter + Height + Older_12, data = abalone)
predictions <- predict(original_model)
## 2. Replace the outcome with the predicted values from the model
abalone_model_predictions <- abalone %>%
select(c(Length, Diameter, Height, Older_12))
abalone_model_predictions$Whole_Weight_Pred <- predictions
truth_model <- lm(Whole_Weight_Pred ~ Length + Diameter + Height + Older_12, data = abalone_model_predictions)
mypatterns <- expand.grid(Length = 0:1, Diameter = 0:1, Height = 0:1, Older_12 = 0:1, Whole_Weight_Pred = 0:1)
mypatterns <- mypatterns[rowSums(mypatterns) != 0,]
## 3. Begin a loop (1000 times that...)
simulation <- function(runs = 2, multisession = FALSE){
# First, setup our results array
results <- array(NA, dim = c(3, runs, 3 ))
dimnames(results) <- list(c("Mean.Imp", "Mice.Imp", "Misl.Imp"),
as.character(1:runs),
c("Estimate", "2.5 %", "97.5 %")
)
# Next begin our run through each of the simulations
for(run in 1:runs){
# We begin first with amputing our data
amputed_mads <- ampute(abalone_model_predictions,
prop = .60,
patterns = mypatterns,
mech = "MCAR")
# We can then begin the imputation
amputed_data <- amputed_mads$amp
mean_imputations <- mice(amputed_data, method = "mean")
mice_imputations <- mice(amputed_data)
misl_imputations <- misl(amputed_data,
multisession = multisession,
maxit = 5,
nworkers = 12,
con_method = c("Lrnr_mean", "Lrnr_glm", "Lrnr_randomForest"),
bin_method = c("Lrnr_mean", "Lrnr_glm", "Lrnr_randomForest" ),
cat_method = c("Lrnr_mean", "Lrnr_independent_binomial"))
# We can then begin the fitting process
mean_fit <- with(mean_imputations, exp = lm(Whole_Weight_Pred ~ Length + Diameter + Height + Older_12))
mice_fit <- with(mice_imputations, exp = lm(Whole_Weight_Pred ~ Length + Diameter + Height + Older_12))
misl_fit <- lapply(misl_imputations, function(y){
stats::lm(Whole_Weight_Pred ~ Length + Diameter + Height + Older_12, data = y)
})
# The results can be pooled
mean_pool <- summary(mice::pool(mean_fit), conf.int = TRUE)
mice_pool <- summary(mice::pool(mice_fit), conf.int = TRUE)
misl_pool <- summary(mice::pool(misl_fit), conf.int = TRUE)
# Finally, we can append our results to the array
results[1, run,] <- as.numeric(mean_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[2, run,] <- as.numeric(mice_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[3, run,] <- as.numeric(misl_pool[4, c("estimate", "2.5 %", "97.5 %")])
}
results
}
start_multisession <- Sys.time()
simulation_results_multisession <- simulation(1, multisession = TRUE)
end_multisession <- Sys.time()
start_sequential <- Sys.time()
simulation_results_sequential <- simulation(1, multisession = FALSE)
end_sequential <- Sys.time()
elapsed_time_paralell <- end_multisession - start_multisession
elapsed_time_no_paralell <- end_sequential - start_sequential
save(simulation_results_multisession, simulation_results_sequential, file = "time_trial.Rdata")
.libPaths()
?.libpaths
?.libPaths
system.time()
library("future")
?future
future::nbrOfWorkers()
R.Version()
