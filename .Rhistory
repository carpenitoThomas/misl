# Next we stack the learners
learner_stack_code <- paste("stack", " <- sl3::make_learner(sl3::Stack,",paste(learner_list, collapse = ", "), ")", sep="")
eval(parse(text=learner_stack_code))
# Then we make and train the Super Learner
sl <- sl3::Lrnr_sl$new(learners = stack)
# We can then go ahead and train our model on the bootstrap data
sl_train_boot_dot <- sl3::delayed_learner_train(sl, sl3_task_boot_dot)
# We can finally execute the super learner
# This bit of code can be used if people wanted multi-threading (depending on computer capacity)
sl_sched_boot_dot <- delayed::Scheduler$new(sl_train_boot_dot, delayed::FutureJob)
sl_stack_fit_boot_dot <- sl_sched_boot_dot$compute()
# We are now at the point where we can obtain predictions for matching candidates using X_miss
# Here we can create the predictions and then we can match them with the hot-deck method
# Interestingly, there are 4 different ways we can match: https://stefvanbuuren.name/fimd/sec-pmm.html#sec:pmmcomputation
# Original PMM uses type 1 matching, so that's what we are going to use
predictions_task_boot_dot <- sl3::sl3_Task$new(dataset_copy, covariates = xvars, outcome = "yobs", outcome_type = outcome_type )
predictions_boot_dot <- sl_stack_fit_boot_dot$predict(predictions_task_boot_dot)
if(outcome_type == "continuous"){
sl_train_full_hat <- sl3::delayed_learner_train(sl, sl3_task_full_hat)
sl_sched_full_hat <- delayed::Scheduler$new(sl_train_full_hat, delayed::FutureJob)
sl_stack_fit_full_hat <- sl_sched_full_hat$compute()
predictions_task_full_hat <- sl3::sl3_Task$new(dataset_copy, covariates = xvars, outcome = "yobs", outcome_type = outcome_type )
predictions_full_hat <- sl_stack_fit_full_hat$predict(predictions_task_full_hat)
}
if(outcome_type == "binomial"){
# Imputation for binary variables can be found from the following resources:
# https://stefvanbuuren.name/fimd/sec-categorical.html#def:binary
# https://github.com/cran/mice/blob/master/R/mice.impute.logreg.R
uniform_values <- runif(length(predictions_boot_dot))
predicted_values <- as.integer(uniform_values <= predictions_boot_dot)
dataset_master_copy[[column]] <- ifelse(is.na(dataset[[column]]), predicted_values, dataset[[column]])
}else if(outcome_type == "continuous"){
predictions_boot_dot <- predictions_boot_dot
# If continuous, we can do matching
# Find the 5 closest donors and making a random draw from them - there are a lot of ways to do matching
# https://stefvanbuuren.name/fimd/sec-pmm.html#sec:pmmcomputation
# This matching was updated on 10/4 to help with speedup (15% reduction in time). We only match on missing values.
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[!ry]
for(value in seq_along(non_na_predictions)){
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[ry])), 5)
list_of_matches[value] <- y[ry][sample(distance,1)]
}
list_of_matches
}else if(outcome_type== "categorical"){
# For categorical data we follow advice suggested by Van Buuren:
# https://github.com/cran/mice/blob/master/R/mice.impute.polyreg.R
uniform_values <- rep(runif(length(predictions_boot_dot)), each = length(levels(fy)))
post <- sl3::unpack_predictions(predictions_boot_dot)
draws <- uniform_values > apply(post, 1, cumsum)
idx <- 1 + apply(draws, 2, sum)
predicted_values <- levels(fy)[idx]
factor(predicted_values[!ry], levels = levels(fy))
}
}
mice_misl <- mice(boys_temp, method = c("misl"), maxit = 1, m = 1)
set.seed(1234)
mice_misl <- mice(boys, method = c("misl"), maxit = 1, m = 1)
set.seed(1234)
misl_misl <- misl(boys, maxit = 2, m = 2, quiet = FALSE,
con_method = c("Lrnr_glm_fast", "Lrnr_earth", "Lrnr_ranger"),
bin_method = c("Lrnr_earth", "Lrnr_glm_fast", "Lrnr_ranger"),
cat_method = c("Lrnr_independent_binomial", "Lrnr_ranger"))
mice_misl <- mice(boys, method = c("misl"), maxit = 2, m = 2)
colSums(is.na(dataset))
library("tidyverse")
library("tidyverse")
library("mice")
library("miceadds")
library("mitools")
library("srvyr")
library("misl")
library("survey")
#library("ggpubr")
#library("nnet")
set.seed(1234)
# Load the dataset
load("/Users/thomascarpenito/Documents/Northeastern/Dissertation/Firearm/data/fiss/ICPSR_38089/DS0001/fiss.rda")
fiss <- da38089.0001
fiss <- fiss %>%
filter(FA_GSW == "(1) Yes")
fiss_reduced <- fiss %>%
select(c(PSU, STRATUM, WT_C, YEAR,
ARG, CRIME, DRUGS, FIGHT, ONTHEJOB, BDYPTG_C, SEX, FIRARM_C, LOCG_C, TRANSG_C, WHOG_C, DIAG, DISP, AGENYR_C,
CLASS_C)) %>%
mutate(
CLASS_C = as.character(CLASS_C),
CLASS_C = ifelse(CLASS_C == "(1) Unintentnl", "Unintentional", CLASS_C),
CLASS_C = ifelse(CLASS_C == "(3) Suicide", "Self-Harm", CLASS_C),
CLASS_C = ifelse(CLASS_C == "(2) Assault", "Assault", CLASS_C),
CLASS_C = ifelse(CLASS_C == "(4) Law enforce", "Legal Intervention", CLASS_C),
CLASS_C = ifelse(CLASS_C == "(0) Unknown", "Undetermined", CLASS_C),
CLASS_C = factor(CLASS_C, levels = c("Assault","Unintentional", "Self-Harm", "Legal Intervention")),
age_cat = case_when(
AGENYR_C <= 14 ~ "Less than 14",
AGENYR_C >= 15 & AGENYR_C <= 34 ~ "Between 15 and 34",
AGENYR_C >= 35 & AGENYR_C <= 54 ~ "Between 35 and 54",
AGENYR_C >= 55~ "Greater than 55",
),
age_cat = factor(age_cat),
short_longgun = as.character(FIRARM_C),
short_longgun = ifelse(short_longgun == "(1) Handgun", "Handgun", "Long Gun"),
short_longgun = ifelse(FIRARM_C == "(0) Unknown", NA, short_longgun),
short_longgun = factor(short_longgun)
) %>%
mutate_if(is.factor, ~as.character(.)) %>%
mutate(across(where(is.character), ~na_if(., "(0) Unknown"))) %>%
mutate_if(is.character, ~as.factor(.))
colSums(is.na(fiss_reduced))
load("/Users/thomascarpenito/Documents/Northeastern/Dissertation/Pesticides/data/merged_analyte_hsd_wide.Rdata")
View(merged_analyte_hsd_wide)
load("/Users/thomascarpenito/Documents/Northeastern/Dissertation/Pesticides/data/merged_analyte_hsd_wide.Rdata")
dataset <- merged_analyte_hsd_wide
m = 5
maxit = 5
con_method = c("Lrnr_mean", "Lrnr_glm_fast")
bin_method = c("Lrnr_mean", "Lrnr_glm_fast")
cat_method = c("Lrnr_mean")
ignore_predictors = c("motherID", "pretermBirth", "race")
quiet = FALSE
# TODO: Builds out more checks to ensure the MISL algorithm can run properly
check_dataset(dataset)
library('devtools')
load_all()
# TODO: Builds out more checks to ensure the MISL algorithm can run properly
check_dataset(dataset)
# Initialize the return object (or, the dataframes that we want to return)
imputed_datasets <- vector("list", m)
# Initializes the trace plot (for inspection of imputations)
trace_plot <- expand.grid(statistic = c("mean", "sd"), value = NA, variable = colnames(dataset), m = m_loop, iteration = seq_along(1:maxit))
m_loop <- 1
# Initializes the trace plot (for inspection of imputations)
trace_plot <- expand.grid(statistic = c("mean", "sd"), value = NA, variable = colnames(dataset), m = m_loop, iteration = seq_along(1:maxit))
# Identifies which columns need to be imputed. According to van Buren, this order does not matter
# https://stefvanbuuren.name/fimd/sec-algoptions.html
# Future work should explore if this makes a difference
column_order <- sample(colnames(dataset)[colSums(is.na(dataset))!=0])
# Retain a copy of the dataset for each of the new m datasets
dataset_master_copy <- dataset
# As with all gibbs sampling methods, we will need to initialize the starting dataframe
# This is step 2 of https://stefvanbuuren.name/fimd/sec-FCS.html#def:mice
for(column_number in seq_along(dataset_master_copy)){
dataset_master_copy[is.na(dataset_master_copy[[column_number]]), column_number] <-  sample(dataset[[column_number]][!is.na(dataset[[column_number]])], sum(is.na(dataset[[column_number]])), replace = TRUE)
}
seq_along(dataset_master_copy)
column_number <- 1
dataset_master_copy[is.na(dataset_master_copy[[column_number]]), column_number]
sample(dataset[[column_number]][!is.na(dataset[[column_number]])], sum(is.na(dataset[[column_number]])), replace = TRUE)
# As with all gibbs sampling methods, we will need to initialize the starting dataframe
# This is step 2 of https://stefvanbuuren.name/fimd/sec-FCS.html#def:mice
for(column_number in seq_along(dataset_master_copy)){
print(column_number)
dataset_master_copy[is.na(dataset_master_copy[[column_number]]), column_number] <-  sample(dataset[[column_number]][!is.na(dataset[[column_number]])], sum(is.na(dataset[[column_number]])), replace = TRUE)
}
column_number <- 75
seq_along(dataset_master_copy)
dataset_master_copy[is.na(dataset_master_copy[[column_number]]), column_number]
library('sl3')
citation("sl3")
?sl3
?"sl3"
30/25
install.packages("hexSticker")
?sticker
library("hexSticker")
?sticker
library('devtools')
build_readme()
library(misl)
library(tidyverse)
library(mice)
library(sl3)
set.seed(12345)
nhanes <- misl::nhanes
head(nhanes)
round(colSums(is.na(nhanes)) / nrow(nhanes), 2)
mice::md.pattern(nhanes, rotate.names = TRUE)
nrow(nhanes)
(4337 / nrow(nhanes)) * 100
sl3::sl3_list_learners("continuous")
sl3::sl3_list_learners("binomial")
sl3::sl3_list_learners("categorical")
misl_imputations
?plot
misl::plot
misl_imp
usethis::use_vignette("sensitivity_analysis")
usethis::use_vignette("mice_integration")
usethis::use_vignette("paralellization")
library(misl)
set.seed(123)
misl_imp <- misl(abalone, maxit = 5, m = 5, quiet = TRUE,
con_method = c("Lrnr_glm_fast", "Lrnr_mean"),
bin_method = c("Lrnr_mean", "Lrnr_glm_fast"),
cat_method = c("Lrnr_independent_binomial", "Lrnr_mean"))
misl_modeling <- lapply(misl_imp, function(y){
stats::lm(Whole_Weight ~ Sex + Length + Diameter + Height + Older_12, data = y$datasets)
})
summary(mice::pool(misl_modeling), conf.int = TRUE)
misl::plot(misl_imputations)
misl_imputations
misl::plot(misl_imp)
?mice
imp <- mice(nhanes, meth = c("sample", "pmm", "logreg"))
imp <- mice(nhanes, meth = c("sample", "pmm", "logreg", "norm"))
imp <- mice(mice::nhanes, meth = c("sample", "pmm", "logreg", "norm"))
imp <- mice(mice::nhanes2, meth = c("sample", "pmm", "logreg", "norm"))
ncol(mice::nhanes2)
colnames(mice::nhanes2)
table(mice::nhanes2$hyp)
table(mice::nhanes2$chl)
imp <- mice(mice::nhanes2, meth = c("sample", "misl", "cart", "pmm"))
load_all()
imp <- mice(mice::nhanes2, meth = c("sample", "misl", "cart", "pmm"))
imp <- mice(mice::nhanes2, meth = c("sample", "misl(con_method = c('Lrnr_glm_fast', 'Lrnr_earth', 'Lrnr_ranger'),
bin_method = c('Lrnr_earth', 'Lrnr_glm_fast', 'Lrnr_ranger'),
cat_method = c('Lrnr_independent_binomial', 'Lrnr_ranger'))", "cart", "pmm"))
imp <- mice(mice::nhanes2, meth = c("sample", "misl", "logreg", "norm"))
?mice.pool
?pool
mice_misl_imputations <- mice(mice::nhanes2, meth = c("sample", "misl", "logreg", "norm"))
library(misl)
library(mice)
mice_misl_imputations <- mice(mice::nhanes2, meth = c("sample", "misl", "logreg", "norm"))
mice_misl_fit <- with(data = mice_misl_imputations, exp = lm(bmi ~ hyp + chl))
mice_misl_fit <- with(data = mice_misl_imputations, exp = lm(bmi ~ hyp + chl))
summary(pool(mice_misl_fit))
View(mice_misl_imputations)
View(complete(mice_misl_imputations,1))
nrow(abalone)
nrow(misl::nhanes)
system.time({print("hi")})
library(misl)
library(future)
# Sequential dataset processessing, Sequential super learning  (default)
seq_seq <- system.time({
plan(list(sequential,sequential))
misl(abalone)
})
# Sequential dataset processessing, parallel super learning (8)
seq_par <- system.time({
plan(list(sequential,tweak(multisession, workers = 8)))
misl(abalone)
})
# Parallel dataset processessing (8), sequential super learning
par_seq <- system.time({
plan(list(tweak(multisession, workers = 5), sequential))
misl(abalone)
})
# Parallel dataset processessing (4), parallel super learning (2)
par_par <- system.time({
plan(list(tweak(multisession, workers = 4),tweak(multisession, workers = 2)))
misl(abalone)
})
# Parallel dataset processing to ensure you don't overload your computer
par_safe <- system.time({
plan(list(tweak(multisession, workers = availableCores() %/% 4),tweak(multisession, workers = 4)))
misl(abalone)
})
seq_seq
seq_par
par_seq
par_par
par_safe
seq_par
par_seq
par_seq <- system.time({
plan(list(tweak(multisession, workers = 5), sequential))
misl(abalone)
})
par_seq
par_par
par_par$elapsed
par_par[3]
?build_readme()
build_readme()
build_readme()
library(misl)
set.seed(123)
misl_imp <- misl(abalone, maxit = 5, m = 5, quiet = TRUE,
con_method = c("Lrnr_glm_fast", "Lrnr_mean"),
bin_method = c("Lrnr_mean", "Lrnr_glm_fast"),
cat_method = c("Lrnr_independent_binomial", "Lrnr_mean"))
misl_modeling <- lapply(misl_imp, function(y){
stats::lm(Whole_Weight ~ Sex + Length + Diameter + Height + Older_12, data = y$datasets)
})
summary(mice::pool(misl_modeling), conf.int = TRUE)
misl::plot(misl_imp)
?lapply
misl_imp
build_readme()
#'
#' @return
#' @export
#'
#' @examples
#' # First generate the imputations
#' misl_imp <- misl(nhanes, m = 1)
#'
#' # Then you can generate the associated traceplot to investiga
#' plot(misl_imp)
plot <- function(imputations){
long_dataframe <- data.frame()
for(mdatasets in imputations){
long_dataframe <- rbind(long_dataframe, mdatasets$trace)
}
long_dataframe <- long_dataframe %>%
filter(complete.cases(.))
num_pages <- ceiling(length(unique(long_dataframe$variable)) / 3)
for(page_num in seq_len(num_pages)){
print(
long_dataframe %>%
dplyr::mutate(m = as.factor(m)) %>%
dplyr::filter(!is.na(value)) %>%
ggplot2::ggplot(ggplot2::aes(x = iteration, y = value, group = m, color= m)) +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggforce::facet_wrap_paginate(variable ~ statistic , scales = "free", ncol = 2, nrow = 3, page = page_num) +
ggplot2::theme_bw()
)
}
}
plot(misl_imp)
library("misl")
misl::plot(misl_imp)
load_all()
rm(list = c("plot"))
load_all()
build_readme()
load_all()
check()
document()
document()
use_r("trace_plot")
load_all()
build_readme()
document()
check(vignettes = FALSE)
check(vignettes = FALSE)
check(vignettes = FALSE)
build_rmd()
install()
build_rmd()
library(misl)
load_all()
build(vignettes = FALSE)
install()
load_all()
build_rmd()
document()
build_rmd()
load_all()
?misl
build_rmd()
check(vignettes = FALSE)
?make.method
make.method(nhanes2)
document()
check(vignettes = FALSE)
?misl
load("~/Documents/Programming/misl/data-raw/abalone.rdata")
colnames(abalone)
load("~/Documents/Programming/misl/data/abalone.rda")
?runing
?runif
stats::ru?head
?head
utils::head()
utils::head
?utils::head
?sd
?mean
?complete.cases
check(vignettes = FALSE)
document()
misl_imp <- misl(nhanes, m = 2, maxit = 2)
imputations <- misl_imp
for(mdatasets in imputations){
long_dataframe <- rbind(long_dataframe, mdatasets$trace)
}
long_dataframe <- data.frame()
for(mdatasets in imputations){
long_dataframe <- rbind(long_dataframe, mdatasets$trace)
}
long_dataframe <- long_dataframe %>%
filter(stats::complete.cases(.))
long_dataframe
long_dataframe$variable
num_pages <- ceiling(length(unique(long_dataframe$variable)) / 3)
for(page_num in seq_len(num_pages)){
print(
long_dataframe %>%
dplyr::mutate(m = as.factor(m)) %>%
dplyr::filter(!is.na(value)) %>%
ggplot2::ggplot(ggplot2::aes(x = iteration, y = value, group = m, color= m)) +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggforce::facet_wrap_paginate(variable ~ statistic , scales = "free", ncol = 2, nrow = 3, page = page_num) +
ggplot2::theme_bw()
)
}
#'
#' @return
#' @export
#'
#' @examples
#' # First generate the imputations
#' misl_imp <- misl(nhanes, m = 2, maxit = 2)
#'
#' # Then you can generate the associated traceplot to investigate
#' trace_plot(misl_imp)
trace_plot <- function(imputations){
long_dataframe <- data.frame()
for(mdatasets in imputations){
long_dataframe <- rbind(long_dataframe, mdatasets$trace)
}
long_dataframe <- long_dataframe %>%
filter(stats::complete.cases(.))
num_pages <- ceiling(length(unique(long_dataframe$variable)) / 3)
for(page_num in seq_len(num_pages)){
print(
long_dataframe %>%
dplyr::mutate(m = as.factor(m)) %>%
dplyr::filter(!is.na(value)) %>%
ggplot2::ggplot(ggplot2::aes(x = iteration, y = value, group = m, color= m)) +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggforce::facet_wrap_paginate(variable ~ statistic , scales = "free", ncol = 2, nrow = 3, page = page_num) +
ggplot2::theme_bw()
)
}
}
trace_plot(misl_imp)
check(vignettes = FALSE)
long_dataframe <- data.frame()
for(mdatasets in imputations){
long_dataframe <- rbind(long_dataframe, mdatasets$trace)
}
long_dataframe <- long_dataframe %>%
filter(stats::complete.cases(.))
is.atomic(long_dataframe)
misl_imp <- misl(abalone,maxit = 2,m = 2,con_method = c("Lrnr_glm_fast", "Lrnr_earth", "Lrnr_ranger"),bin_method = c("Lrnr_earth","Lrnr_glm_fast", "Lrnr_ranger"),cat_method = c("Lrnr_independent_binomial", "Lrnr_ranger"))
misl_imp <- misl_mnar(abalone,abalone, maxit = 2, m = 2, quiet = TRUE,con_method = c("Lrnr_glm_fast", "Lrnr_earth", "Lrnr_ranger"),bin_method = c("Lrnr_earth", "Lrnr_glm_fast", "Lrnr_ranger"),cat_method = c("Lrnr_independent_binomial", "Lrnr_ranger"),delta_cat = 3,delta_var = "Length")
document()
load_all()
rm(list = c("trace_plot"))
load_all()
document()
build(vignettes = FALSE)
load_all()
check(vignettes = FALSE)
?filter
?ceiling
imputations
?imputations
document()
?trace_plot
document()
library("devtools")
document()
load_all()
check()
build(vignettes = FALSE)
check()
check(vignettes = FALSE)
build_readme()
?misl
build(vignettes = FALSE)
load_all()
library('devtools')
load_all()
build_readme()
?theme
library("devtoosl")
load_all()
load()
library('devtools')
load_all()
build_readme()
library('devtools')
install()
build()
build_readme()
vignette(misl)
load_all
load_all()
vignette("misl")
install()
library("misl")
vignette("misl")
vignette("mice")
?vignette
vignette( package = "misl")
vignette( package = "mice")
browseVignettes("misl")
browseVignettes("mice")
browseVignettes()
library('devtools')
build_readme()
check()
load_all()
library("devtools")
load_all()
vignette("misl")
build()
list <- c("a", "ab", "a", "b", "bc", "de", "a" )
list.unique()
unique(list)
install.packages("misl")
install.packages("misl")
library(devtools)
build()
