if(i == 1){
dataset_copy <- dataset_master_copy
for(column_number in seq_along(dataset_copy)){
# This is a check to see if the column is a factor, requiring mode imputation
# This means that the column should be registered as a factor.
column_type <- check_datatype(dataset[[column_number]])
if(column_type == "categorical"){
dataset_copy[is.na(dataset_copy[[column_number]]), column_number] <-  impute_mode(dataset_copy[[column_number]])
}else{
# We assume now that we have some continuous variable... BUT this variable could be binary or continuous
# Major assumption, if the column is binary then it must ONLY have the values 0,1 (not 1,2 - for example)
# This function is incomplete in its checks...
if(column_type == "binary"){
dataset_copy[is.na(dataset_copy[[column_number]]), column_number] <-  impute_mode(dataset_copy[[column_number]])
}else{
# Here, we assume a continuous variable and can use simple mean or median imputation
dataset_copy[is.na(dataset_copy[[column_number]]), column_number] <-  get(missing_default)(dataset_copy[[column_number]], na.rm = TRUE)
}
}
}
}else{
dataset_copy <- full_dataframe
}
dataset_copy
yvar
new_prediction_task <- sl3::sl3_Task$new(dataset_copy, covariates = xvars, outcome = yvar)
predictions <- stack_fit$predict(new_prediction_task)
outcome_type
as.factor(ifelse(missing_yvar, as.character(sl3::predict_classes(sl3::unpack_predictions(predictions))), as.character(dataset[[column]])))
predictions
as.character(sl3::predict_classes(sl3::unpack_predictions(predictions))
)
predictions
predictions[[1]]
as.factor(ifelse(missing_yvar, as.character(sl3::predict_classes(sl3::unpack_predictions(predictions))), as.character(dataset[[column]])))
missing_yvar
as.character(sl3::predict_classes(sl3::unpack_predictions(predictions)))
sl3::predict_classes(sl3::unpack_predictions(predictions))
(sl3::unpack_predictions(predictions)
)
sl3::unpack_predictions(predictions
)
sl3::predict_classes(sl3::unpack_predictions(predictions))
outcome_type
predictions
str(predictions)
?sl3::predict_classes
sl3::predict_classes(predictions)
sl3::unpack_predictions(predictions))
sl3::unpack_predictions(predictions)
sl3::unpack_predictions(predictions)
colnames(sl3::unpack_predictions(predictions))
colnames(predictions)
predictions
str(dataset_copy)
xvars
yvar
new_prediction_task <- sl3::sl3_Task$new(dataset_copy, covariates = xvars, outcome = yvar)
predictions <- stack_fit$predict(new_prediction_task)
predictions
outcome_type
as.factor(ifelse(missing_yvar, as.character(sl3::predict_classes(sl3::unpack_predictions(predictions))), as.character(dataset[[column]])))
View(predictions)
stack_fit$predict(new_prediction_task)
str(dataset_copy)
View(dataset_copy)
predictions <- stack_fit$predict(new_prediction_task)
predictions
sl3::predict_classes(sl3::unpack_predictions(predictions))
predictions[[1]]
learner_stack_code
Lrnr_glmnet <- sl3::Lrnr_glmnet()$new
code.lm
Lrnr_glmnet <- sl3::Lrnr_glmnet$new()
learner_stack_code
stack <- sl3::make_learner(sl3::Stack,Lrnr_mean, Lrnr_glmnet)
# Then we make and train the Super Learner
sl <- sl3::Lrnr_sl$new(learners = stack)
stack_fit <- sl$train(task)
new_prediction_task <- sl3::sl3_Task$new(dataset_copy, covariates = xvars, outcome = yvar)
predictions <- stack_fit$predict(new_prediction_task)
predictions[[1]]
build_all()
load_all()
check()
build_readme()
load_all()
library("devtools")
load_all()
misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = FALSE)
misl_imp
View(nhanes)
View(NHANES)
library(misl)
NHANES
load('data-raw/nhanes.rdata')
View(NHANES)
nhanes <- NHANES %>%
select(c(Age, Weight, Height, TotChol, Smoke100, Education)) %>%
mutate(Smoke100 = ifelse(Smoke100 == "No", 0, 1))
nhanes2 <- NHANES %>%
select(c(Age, Weight, Height, TotChol, Smoke100, Education)) %>%
mutate(Smoke100 = ifelse(Smoke100 == "No", 0, 1)) %>%
distinct
nrow(nhanes2)
nhanes2 <- NHANES %>%
select(c(ID, Age, Weight, Height, TotChol, Smoke100, Education)) %>%
mutate(Smoke100 = ifelse(Smoke100 == "No", 0, 1)) %>%
distinct
nrow(nhanes2)
nhanes2 <- NHANES %>%
select(c(ID, Age, Weight, Height, TotChol, Smoke100, Education)) %>%
mutate(Smoke100 = ifelse(Smoke100 == "No", 0, 1)) %>%
distinct %>%
select(-ID)
View(nhanes2)
load('data-raw/nhanes.rdata')
nhanes <- NHANES %>%
select(c(ID, Age, Weight, Height, TotChol, Smoke100, Education)) %>%
mutate(Smoke100 = ifelse(Smoke100 == "No", 0, 1)) %>%
distinct %>%
select(-ID)
write_csv(nhanes, "data-raw/nhanes.csv")
library(tidyverse)
library(readxl)
library(usethis)
load('data-raw/nhanes.rdata')
nhanes <- NHANES %>%
select(c(ID, Age, Weight, Height, TotChol, Smoke100, Education)) %>%
mutate(Smoke100 = ifelse(Smoke100 == "No", 0, 1)) %>%
distinct %>%
select(-ID)
write_csv(nhanes, "data-raw/nhanes.csv")
usethis::use_data(nhanes, overwrite = TRUE, compress = 'xz')
build_readme()
build_readme()
?mice
build_readme()
build_readme()
?mice
?sl3
sl3::sl3_list_learners("continuous")
sl3::sl3_list_properties("continuous")
sl3::sl3_list_learners("continuous")
sl3::sl3_list_learners("binary")
l3_list_learners(c("binomial", "offset"))
sl3_list_learners(c("binomial", "offset"))
sl3::sl3_list_learners(c("binomial", "offset"))
library(misl)
sl3::sl3_list_learners(c("binomial", "offset"))
sl3::sl3_list_learners(c("binomial", "offset"))
library("sl3")
sl3::sl3_list_learners(c("binomial", "offset"))
load_all()
sl3::sl3_list_learners(c("binomial", "offset"))
sl3::sl3_list_learners(c("binomial", "offset"))
load_all()
library("devtools")
load_all()
sl3::sl3_list_learners(c("binomial", "offset"))
list_learners <- function(...) sl3::sl3_list_learners()
list_learners("continuous")
list_learners(c("binomial", "offset"))
library("misl")
load_all()
load_all()
library("misl")
list_learners(c("binomial", "offset"))
load_all()
library("misl")
list_learners(c("binomial", "offset"))
sl3::sl3_list_learners(c("binomial", "offset"))
library("sl3")
sl3::sl3_list_learners(c("binomial", "offset"))
load_all()
library("devtools")
library(misl)
?list_learners
?misl
list_learners <- function(...) sl3::sl3_list_learners(...)
?list_learners
list_learners
?list_learners
misl::list_learners
misl::check_datatype
library("misl")
?misl
?check_datatype
?impute_mode
?impute_placeholders
load_all()
load_all()
?misl::list_learners()
misl::list_learners()
misl::list_learners("binary")
load_all()
library("misl")
misl::list_learners("binary")
sl3::sl3_list_learners("binary")
library("sl3")
sl3::sl3_list_learners("binary")
sl3::sl3_list_learners(c("binary"))
??sl3_list_learners
sl3_list_learners(c("binomial", "offset"))
sl3_list_learners("binomial")
load_all()
library("devtools")
load_all()
library('misl')
misl::list_learners()
?misl::list_learners()
?misl::list_learners("binomial")
?misl::list_learners("binary")
sl3_list_learners(c("binomial", "offset"))
misl::list_learners(c("binomial", "offset"))
?which
load_all()
use_package(sl3)
use_package("sl3")
list_learners <- function(...) sl3::sl3_list_learners(...)
list_learners("binary")
sl3::sl3_list_learners()
?sl3::sl3_list_learners()
library("sl3")
sl3_list_learners("binary")
sl3_list_learners("continuous")
sl3_list_learners("binomial")
library("devtools")
load_all()
library("misl")
misl::list_learners("binomial")
sl3::sl3_list_learners("binomial")
sl3::sl3_get_all_learners("binomial")
sl3::get_all_learners("binomial")
sl3::get_all_learners()
?apropos
learner_names <- apropos("^Lrnr_")
learner_names
sl3::list_learners()
sl3::sl3_list_learners()
sl3::sl3_list_learners("binomial")
get_all_learners()
sl3::sl3_list_learners()
load_all()
library("misl")
misl::get_all_learners()
get_all_learners <- function() {
# search for objects named like sl3 learners
learner_names <- apropos("^Lrnr_")
learners <- mget(learner_names, inherits = TRUE)
# verify that learner inherits from Lrnr_base (and is therefore an actual
# sl3 Learner)
is_learner_real <- sapply(learners, `[[`, "inherit") == "Lrnr_base"
return(learners[which(is_learner_real)])
}
get_all_learners
get_all_learners()
sl3::make_learner()
check()
?rbinom
?sd
?stack
importFrom("stats", "rbinom", "rnorm", "sd")
library('devtools')
importFrom("stats", "rbinom", "rnorm", "sd")
build_readme()
check()
load_all()
library(misl)
?misl
usethis::use_testthat()
install.packages("covr")
library("devtools")
build_rmd()
build_readme()
library("devtools")
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
library(testthat)
?usethis
lubrary("usethis")
library("usethis")
?testthat
use_r("complete")
library(misl)
misl_imp <- misl(nhanes, maxit = 1, m = 3, quiet = TRUE)
library(misl)
load_all()
library(misl)
misl_imp <- misl(nhanes, maxit = 1, m = 3, quiet = TRUE)
misl_imp
str(misl_imp)
misl_imp[[1]]
check()
install.packages("glmnet")
install.packages("glmnet")
load_all()
check()
library(misl)
misl_imp <- misl(nhanes, maxit = 1, m = 3, quiet = TRUE, cat_method = c("Lrnr.mean", "Lrnr_svm"))
misl_imp <- misl(nhanes, maxit = 1, m = 3, quiet = TRUE, cat_method = c("Lrnr_mean", "Lrnr_svm"))
misl_imp <- misl(nhanes, maxit = 1, m = 3, quiet = TRUE, cat_method = c("Lrnr_mean", "Lrnr_multivariate"))
misl_imp <- misl(nhanes, maxit = 1, m = 3, quiet = FALSE, cat_method = c("Lrnr_mean", "Lrnr_multivariate"))
misl_imp <- misl(nhanes, maxit = 1, m = 3, quiet = TRUE, cat_method = c("Lrnr_mean", "Lrnr_ranger"))
misl_imp <- misl(nhanes, maxit = 1, m = 3, quiet = FALSE, cat_method = c("Lrnr_mean", "Lrnr_ranger"))
misl_imp <- misl(nhanes, maxit = 1, m = 3, quiet = TRUE, cat_method = c("Lrnr_mean", "Lrnr_xgboost"))
misl_imp <- misl(nhanes, maxit = 1, m = 3, quiet = FALSE, cat_method = c("Lrnr_mean", "Lrnr_xgboost"))
check()
check()
build()
build_readme()
check()
library('devtools')
check()
library(tidyverse)
data(cpp)
cpp <- cpp %>%
select(c(bmi, agedays, feeding)) %>%
mutate(feeding = as.factor(feeding)) %>%
na.omit
task <- make_sl3_Task(cpp, covariates = c("agedays", "bmi"), outcome = "feeding")
Lrnr_mean <- Lrnr_mean$new()
stack <- make_learner(Stack, Lrnr_mean)
sl <- sl3::Lrnr_sl$new(learners = stack)
stack_fit <- sl$train(task)
predictions <- stack_fit$predict()
names(predictions[[1]][[1]])
library('sl3')
library(tidyverse)
data(cpp)
cpp <- cpp %>%
select(c(bmi, agedays, feeding)) %>%
mutate(feeding = as.factor(feeding)) %>%
na.omit
task <- make_sl3_Task(cpp, covariates = c("agedays", "bmi"), outcome = "feeding")
Lrnr_mean <- Lrnr_mean$new()
stack <- make_learner(Stack, Lrnr_mean)
sl <- sl3::Lrnr_sl$new(learners = stack)
stack_fit <- sl$train(task)
predictions <- stack_fit$predict()
names(predictions[[1]][[1]])
Lrnr_glmnet <- Lrnr_glmnet$new()
stack2 <- make_learner(Stack, Lrnr_mean, Lrnr_glmnet)
sl2 <- sl3::Lrnr_sl$new(learners = stack2)
stack_fit2 <- sl2$train(task)
predictions2 <- stack_fit2$predict()
names(predictions2[[1]][[1]])
library(testthat)
library(misl)
#test_check("misl")
install.packages("Rsolnp")
misl_imp <- misl(nhanes)
load_all()
library('devtools')
load_all()
misl_imp <- misl(nhanes, quiet = FALSE)
misl_imp <- misl(nhanes, m = 1)
check()
library("sl3")
data(cpp_imputed)
cpp_imputed
data(cpp_imputed)
cpp_big <- cpp_imputed[sample(nrow(cpp_imputed), n, replace = TRUE), ]
covars <- c("apgar1", "apgar5", "parity", "gagebrth", "mage", "meducyrs",
"sexn")
outcome <- "haz"
task <- sl3_Task$new(cpp_big, covariates = covars, outcome = outcome,
outcome_type = "continuous")
task
library("sl3")
data(cpp_imputed)
cpp_big <- cpp_imputed[sample(nrow(cpp_imputed), n, replace = TRUE), ]
n = 1e4
data(cpp_imputed)
cpp_big <- cpp_imputed[sample(nrow(cpp_imputed), n, replace = TRUE), ]
covars <- c("apgar1", "apgar5", "parity", "gagebrth", "mage", "meducyrs",
"sexn")
outcome <- "haz"
task <- sl3_Task$new(cpp_big, covariates = covars, outcome = outcome,
outcome_type = "continuous")
cpp_big
nrow(cpp_big)
library("sl3")
data(cpp_imputed)
covars <- c("apgar1", "apgar5", "parity", "gagebrth", "mage", "meducyrs",
"sexn")
outcome <- "haz"
task <- sl3_Task$new(cpp_imputed, covariates = covars, outcome = outcome,
outcome_type = "continuous")
lrnr_glmnet <- Lrnr_glmnet$new()
random_forest <- Lrnr_randomForest$new()
glm_fast <- Lrnr_glm_fast$new()
nnls_lrnr <- Lrnr_nnls$new()
sl3_native <- Lrnr_sl$new(list(random_forest, lrnr_glmnet, glm_fast), nnls_lrnr)
plan(multicore, workers = cpus_physical)
?plan
plan(multicore, workers = cpus_physical)
library(sl3)
library(delayed)
library(SuperLearner)
library(future)
library(ggplot2)
library(data.table)
library(stringr)
library(scales)
plan(multicore, workers = cpus_physical)
plan(multicore)
test <- delayed_learner_train(sl3_native, task)
time_sl3_native_multicore <- system.time({
sched <- Scheduler$new(test, FutureJob, nworkers = cpus_physical,
verbose = FALSE)
cv_fit <- sched$compute()
})
plan(sequential)
test <- delayed_learner_train(sl3_legacy, task)
test <- delayed_learner_train(sl3_native, task)
time_sl3_native_sequential <- system.time({
sched <- Scheduler$new(test, SequentialJob)
cv_fit <- sched$compute()
})
time_sl3_native_sequential
plan(multicore)
test <- delayed_learner_train(sl3_native, task)
time_sl3_native_multicore <- system.time({
sched <- Scheduler$new(test, FutureJob, verbose = FALSE)
cv_fit <- sched$compute()
})
time_sl3_native_multicore
cpus_physical <- as.numeric(system("sysctl -n hw.physicalcpu", intern = TRUE))
cpus_physical
plan(multicore, workers = cpus_physical)
test <- delayed_learner_train(sl3_native, task)
time_sl3_native_multicore <- system.time({
sched <- Scheduler$new(test, FutureJob, verbose = FALSE)
cv_fit <- sched$compute()
})
time_sl3_native_multicore
plan(multicore, workers = cpus_physical)
test <- delayed_learner_train(sl3_native, task)
time_sl3_native_multicore <- system.time({
sched <- Scheduler$new(test, FutureJob, nworkers = cpus_physical, verbose = FALSE)
cv_fit <- sched$compute()
})
time_sl3_native_multicore
cv_fit
library(sl3)
library(delayed)
library(SuperLearner)
library(future)
library(ggplot2)
library(data.table)
library(stringr)
library(scales)
n <- 10000
data(cpp_imputed)
cpp_big <- cpp_imputed[sample(nrow(cpp_imputed), n, replace = TRUE), ]
covars <- c("apgar1", "apgar5", "parity", "gagebrth", "mage", "meducyrs",
"sexn")
outcome <- "haz"
task <- sl3_Task$new(cpp_big, covariates = covars, outcome = outcome,
outcome_type = "continuous")
lrnr_glmnet <- Lrnr_glmnet$new()
random_forest <- Lrnr_randomForest$new()
glm_fast <- Lrnr_glm_fast$new()
nnls_lrnr <- Lrnr_nnls$new()
sl3_native <- Lrnr_sl$new(list(random_forest, lrnr_glmnet, glm_fast), nnls_lrnr)
cpus_physical <- as.numeric(system("sysctl -n hw.physicalcpu", intern = TRUE))
######
plan(sequential)
test <- delayed_learner_train(sl3_native, task)
time_sl3_native_sequential <- system.time({
sched <- Scheduler$new(test, SequentialJob)
cv_fit <- sched$compute()
})
plan(multicore, workers = cpus_physical)
test <- delayed_learner_train(sl3_native, task)
time_sl3_native_multicore <- system.time({
sched <- Scheduler$new(test, FutureJob, nworkers = cpus_physical, verbose = FALSE)
cv_fit <- sched$compute()
})
time_sl3_native_multicore
time_sl3_native_sequential
browseVignettes("mice")
library("mice")
browseVignettes("mice")
browseVignettes("sl3")
browseVignettes("dplyr")
usethis::use_vignette("misl")
library('devtools')
build_rmd("vignettes/misl.Rmd")
build_rmd("vignettes/misl.Rmd")
vignette("misl")
build()
load()
load_all()
vignette("mice")
vignette(misl)
vignette("misl")
build(vignettes = TRUE)
load_all()
vignette("misl")
?misl
load_all()
vignette("misl")
?vignettes
vignettes
vignette()
vignette(misl, package = "misl")
?vignette
vignette(package = "misl")
browseVignettes("misl")
