for(value in seq_along(predictions_boot_dot)){
set.seed(1234)
#distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
#list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
distance <- predictions_boot_dot[value] - ifelse(is.na(dataset[[column]]), NA, predictions_full_hat)
list_of_matches[value] <- ifelse(is.na(dataset[[column]]), NA, dataset[[column]])[sample(distance,1)]
}
# If continuous, we can do matching
# Find the 5 closest donors and making a random draw from them - there are a lot of ways to do matching
# https://stefvanbuuren.name/fimd/sec-pmm.html#sec:pmmcomputation
# Note, there are considerable slow-downs with our matching here and should be improved for efficiency
list_of_matches <- c()
# If continuous, we can do matching
# Find the 5 closest donors and making a random draw from them - there are a lot of ways to do matching
# https://stefvanbuuren.name/fimd/sec-pmm.html#sec:pmmcomputation
# Note, there are considerable slow-downs with our matching here and should be improved for efficiency
list_of_matches <- c()
for(value in seq_along(predictions_boot_dot)){
set.seed(1234)
#distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
#list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
distance <- head(order(abs(predictions_boot_dot[value] - ifelse(is.na(dataset[[column]]), NA, predictions_full_hat))),5)
list_of_matches[value] <- ifelse(is.na(dataset[[column]]), NA, dataset[[column]])[sample(distance,1)]
}
#dataset_master_copy[[column]][is.na(dataset_master_copy[[column]])] <- list_of_matches
dataset_master_copy[[column]][is.na(dataset[[column]])] <- ifelse(is.na(dataset[[column]]), list_of_matches, dataset[[column]])
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(predictions_boot_dot)){
set.seed(1234)
#distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
#list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
distance <- head(order(abs(predictions_boot_dot[value] - ifelse(is.na(dataset[[column]]), NA, predictions_full_hat))),5)
list_of_matches[value] <- ifelse(is.na(dataset[[column]]), NA, dataset[[column]])[sample(distance,1)]
}
#dataset_master_copy[[column]][is.na(dataset_master_copy[[column]])] <- list_of_matches
dataset_master_copy[[column]]<- ifelse(is.na(dataset[[column]]), list_of_matches, dataset[[column]])
part_1 <- dataset_master_copy
# If continuous, we can do matching
# Find the 5 closest donors and making a random draw from them - there are a lot of ways to do matching
# https://stefvanbuuren.name/fimd/sec-pmm.html#sec:pmmcomputation
# Note, there are considerable slow-downs with our matching here and should be improved for efficiency
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(non_na_predictions)){
set.seed(1234)
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
#distance <- head(order(abs(predictions_boot_dot[value] - ifelse(is.na(dataset[[column]]), NA, predictions_full_hat))),5)
#list_of_matches[value] <- ifelse(is.na(dataset[[column]]), NA, dataset[[column]])[sample(distance,1)]
}
dataset_master_copy[[column]][is.na(dataset_master_copy[[column]])] <- list_of_matches
dataset_master_copy[[column]] == part_1$Height
sum(dataset_master_copy[[column]] == part_1$Height)
build(vignettes = FALSE)
load_all()
post_time <- system.time({
misl(abalone,
maxit = 2,
m = 1,
quiet = FALSE,
con_method = c("Lrnr_glm_fast", "Lrnr_earth"),
bin_method = c("Lrnr_earth", "Lrnr_glm_fast"),
cat_method = c("Lrnr_independent_binomial", "Lrnr_ranger")
)
})
post_time
build(vignettes = FALSE)
load_all()
rm(list = c("list_learners"))
load_all()
post_time <- system.time({
misl(abalone,
maxit = 2,
m = 1,
quiet = FALSE,
con_method = c("Lrnr_glm_fast", "Lrnr_earth"),
bin_method = c("Lrnr_earth", "Lrnr_glm_fast"),
cat_method = c("Lrnr_independent_binomial", "Lrnr_ranger")
)
})
post_time
(78.395 - 66.91) / 78.395
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(non_na_predictions)){
set.seed(1234)
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
dataset_master_copy[[column]][is.na(dataset_master_copy[[column]])] <- list_of_matches
for(value in seq_along(non_na_predictions)){
set.seed(1234)
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(non_na_predictions)){
set.seed(1234)
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
dataset_master_copy[[column]][is.na(dataset_master_copy[[column]])] <- list_of_matches
a <- dataset_master_copy[[column]]
list_of_matches <- c()
for(value in seq_along(predictions_boot_dot)){
distance <- head(order(abs(predictions_boot_dot[value] - ifelse(is.na(dataset[[column]]), NA, predictions_full_hat))),5)
list_of_matches[value] <- ifelse(is.na(dataset[[column]]), NA, dataset[[column]])[sample(distance,1)]
}
dataset_master_copy[[column]]<- ifelse(is.na(dataset[[column]]), list_of_matches, dataset[[column]])
b <- dataset_master_copy[[column]]
sum(a == b)
a == b
list_of_matches <- c()
for(value in seq_along(predictions_boot_dot)){
set.seed(1234)
distance <- head(order(abs(predictions_boot_dot[value] - ifelse(is.na(dataset[[column]]), NA, predictions_full_hat))),5)
list_of_matches[value] <- ifelse(is.na(dataset[[column]]), NA, dataset[[column]])[sample(distance,1)]
}
dataset_master_copy[[column]]<- ifelse(is.na(dataset[[column]]), list_of_matches, dataset[[column]])
a == b
list_of_matches <- c()
for(value in seq_along(predictions_boot_dot)){
set.seed(1234)
distance <- head(order(abs(predictions_boot_dot[value] - ifelse(is.na(dataset[[column]]), NA, predictions_full_hat))),5)
list_of_matches[value] <- ifelse(is.na(dataset[[column]]), NA, dataset[[column]])[sample(distance,1)]
}
dataset_master_copy[[column]]<- ifelse(is.na(dataset[[column]]), list_of_matches, dataset[[column]])
b <- dataset_master_copy[[column]]
sum(a == b)
sum(is.na(dataset$Height))
nrow(dataset)
colSums(is.na(abalone))/ nrow(abalone)
build()
build(vignettes = FALSE)
load_all()
dataset_master_copy[[column]][is.na(dataset_master_copy[[column]])]
column
list_of_matches
dataset_master_copy[[column]][is.na(dataset_master_copy[[column]])]
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(non_na_predictions)){
set.seed(1234)
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
dataset_master_copy[[column]][is.na(dataset[[column]])] <- list_of_matches
a <- dataset_master_copy[[column]][is.na(dataset[[column]])]
list_of_matches <- c()
for(value in seq_along(predictions_boot_dot)){
distance <- head(order(abs(predictions_boot_dot[value] - ifelse(is.na(dataset[[column]]), NA, predictions_full_hat))),5)
list_of_matches[value] <- ifelse(is.na(dataset[[column]]), NA, dataset[[column]])[sample(distance,1)]
}
dataset_master_copy[[column]]<- ifelse(is.na(dataset[[column]]), list_of_matches, dataset[[column]])
b <- dataset_master_copy[[column]]
a == b
list_of_matches <- c()
for(value in seq_along(predictions_boot_dot)){
set.seed(1234)
distance <- head(order(abs(predictions_boot_dot[value] - ifelse(is.na(dataset[[column]]), NA, predictions_full_hat))),5)
list_of_matches[value] <- ifelse(is.na(dataset[[column]]), NA, dataset[[column]])[sample(distance,1)]
}
dataset_master_copy[[column]]<- ifelse(is.na(dataset[[column]]), list_of_matches, dataset[[column]])
b <- dataset_master_copy[[column]]
sum(a == b)
b
a
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(non_na_predictions)){
set.seed(1234)
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
dataset_master_copy[[column]][is.na(dataset[[column]])] <- list_of_matches
a <- dataset_master_copy[[column]]
a == b
sum(a == b)
dataset_master_copy[[column]][is.na(dataset[[column]])]
build(vignettes = FALSE)
load_all()
set.seed(1234)
a <-  misl(abalone,
maxit = 2,
m = 1,
quiet = FALSE,
con_method = c("Lrnr_glm_fast", "Lrnr_earth"),
bin_method = c("Lrnr_earth", "Lrnr_glm_fast"),
cat_method = c("Lrnr_independent_binomial", "Lrnr_ranger")
)
build(vignettes = FALSE)
load_all()
set.seed(1234)
b <-  misl(abalone,
maxit = 2,
m = 1,
quiet = FALSE,
con_method = c("Lrnr_glm_fast", "Lrnr_earth"),
bin_method = c("Lrnr_earth", "Lrnr_glm_fast"),
cat_method = c("Lrnr_independent_binomial", "Lrnr_ranger")
)
a[[1]]$datasets$Height == b[[1]]$datasets$Height
build(vignettes = FALSE)
load_all()
set.seed(1234)
b <-  misl(abalone,
maxit = 2,
m = 1,
quiet = FALSE,
con_method = c("Lrnr_glm_fast", "Lrnr_earth"),
bin_method = c("Lrnr_earth", "Lrnr_glm_fast"),
cat_method = c("Lrnr_independent_binomial", "Lrnr_ranger")
)
a[[1]]$datasets$Height == b[[1]]$datasets$Height
sum(a[[1]]$datasets$Height == b[[1]]$datasets$Height)
build(vignettes = FALSE)
load_all()
set.seed(1234)
a <-  misl(abalone,
maxit = 2,
m = 1,
quiet = FALSE,
con_method = c("Lrnr_glm_fast", "Lrnr_earth"),
bin_method = c("Lrnr_earth", "Lrnr_glm_fast"),
cat_method = c("Lrnr_independent_binomial", "Lrnr_ranger")
)
sum(a[[1]]$datasets$Height == b[[1]]$datasets$Height)
a[[1]]$datasets$Height == b[[1]]$datasets$Height
sum(a[[1]]$datasets$Height != b[[1]]$datasets$Height)
is.na(abalone$Height)
sum(is.na(abalone$Height))
View(a[[1]]$datasets$Height)
View(b[[1]]$datasets$Height)
# If continuous, we can do matching
# Find the 5 closest donors and making a random draw from them - there are a lot of ways to do matching
# https://stefvanbuuren.name/fimd/sec-pmm.html#sec:pmmcomputation
# This matching was updated on 10/4 to help with speedup (15% reduction in time). We only match on missing values.
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
length(non_na_predictions)
sum(is.na(dataset$Height))
seq_along(non_na_predictions)
value <- 1
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
distance
build(vignettes = FALSE)
load_all()
set.seed(1234)
new <-  misl(abalone,
maxit = 2,
m = 1,
quiet = FALSE,
con_method = c("Lrnr_glm_fast", "Lrnr_earth"),
bin_method = c("Lrnr_earth", "Lrnr_glm_fast"),
cat_method = c("Lrnr_independent_binomial", "Lrnr_ranger")
)
build(vignettes = FALSE)
load_all()
set.seed(1234)
old <-  misl(abalone,
maxit = 2,
m = 1,
quiet = FALSE,
con_method = c("Lrnr_glm_fast", "Lrnr_earth"),
bin_method = c("Lrnr_earth", "Lrnr_glm_fast"),
cat_method = c("Lrnr_independent_binomial", "Lrnr_ranger")
)
new[[1]]$datasets$Height == old[[1]]$datasets$Height
build(vignettes = FALSE)
load_all()
set.seed(1234)
new <-  misl(abalone,
maxit = 2,
m = 1,
quiet = FALSE,
con_method = c("Lrnr_glm_fast", "Lrnr_earth"),
bin_method = c("Lrnr_earth", "Lrnr_glm_fast"),
cat_method = c("Lrnr_independent_binomial", "Lrnr_ranger")
)
new[[1]]$datasets$Height == old[[1]]$datasets$Height
length(predictions_boot_dot)
length(non_na_predictions)
sum(is.na(dataset[[column]]))
sum(list_of_matches)
# If continuous, we can do matching
# Find the 5 closest donors and making a random draw from them - there are a lot of ways to do matching
# https://stefvanbuuren.name/fimd/sec-pmm.html#sec:pmmcomputation
# This matching was updated on 10/4 to help with speedup (15% reduction in time). We only match on missing values.
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(non_na_predictions)){
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
length(list_of_matches)
value <- 1
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
dataset[[column]]
dataset[[column]][!is.na(dataset[[column]])]
length(predictions_full_hat[!is.na(dataset[[column]])])
nrow(predictions_full_hat[!is.na(dataset[[column]])])
length(predictions_full_hat[!is.na(dataset[[column]])])
nrow(dataset[[column]][!is.na(dataset[[column]])])
length(dataset[[column]][!is.na(dataset[[column]])])
distance
dataset_master_copy[[column]][is.na(dataset[[column]])]
length(dataset_master_copy[[column]][is.na(dataset[[column]])])
length(list_of_matches)
# If continuous, we can do matching
# Find the 5 closest donors and making a random draw from them - there are a lot of ways to do matching
# https://stefvanbuuren.name/fimd/sec-pmm.html#sec:pmmcomputation
# This matching was updated on 10/4 to help with speedup (15% reduction in time). We only match on missing values.
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(non_na_predictions)){
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
set.seed(1234)
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(non_na_predictions)){
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
dataset_master_copy[[column]][is.na(dataset[[column]])] <- list_of_matches
new <- dataset_master_copy[[column]]
set.seed(1234)
list_of_matches <- c()
for(value in seq_along(predictions_boot_dot)){
distance <- head(order(abs(predictions_boot_dot[value] - ifelse(is.na(dataset[[column]]), NA, predictions_full_hat))),5)
list_of_matches[value] <- ifelse(is.na(dataset[[column]]), NA, dataset[[column]])[sample(distance,1)]
}
dataset_master_copy[[column]]<- ifelse(is.na(dataset[[column]]), list_of_matches, dataset[[column]])
old <- dataset_master_copy[[column]]
new == old
set.seed(1234)
list_of_matches <- c()
for(value in seq_along(predictions_boot_dot)){
distance <- head(order(abs(predictions_boot_dot[value] - ifelse(is.na(dataset[[column]]), NA, predictions_full_hat))),5)
list_of_matches[value] <- ifelse(is.na(dataset[[column]]), NA, dataset[[column]])[sample(distance,1)]
}
dataset_master_copy[[column]]<- ifelse(is.na(dataset[[column]]), list_of_matches, dataset[[column]])
old <- dataset_master_copy[[column]]
new == old
set.seed(1234)
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(non_na_predictions)){
set.seed(1234)
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
dataset_master_copy[[column]][is.na(dataset[[column]])] <- list_of_matches
new <- dataset_master_copy[[column]]
new == old
set.seed(1234)
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(non_na_predictions)){
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
dataset_master_copy[[column]][is.na(dataset[[column]])] <- list_of_matches
new <- dataset_master_copy[[column]]
new == old
set.seed(1234)
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(non_na_predictions)){
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
dataset_master_copy[[column]][is.na(dataset[[column]])] <- list_of_matches
set.seed(1234)
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(non_na_predictions)){
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
dataset_master_copy[[column]][is.na(dataset[[column]])] <- list_of_matches
new <- dataset_master_copy[[column]]
set.seed(1234)
list_of_matches <- c()
for(value in seq_along(predictions_boot_dot)){
distance <- head(order(abs(predictions_boot_dot[value] - ifelse(is.na(dataset[[column]]), NA, predictions_full_hat))),5)
list_of_matches[value] <- ifelse(is.na(dataset[[column]]), NA, dataset[[column]])[sample(distance,1)]
}
dataset_master_copy[[column]]<- ifelse(is.na(dataset[[column]]), list_of_matches, dataset[[column]])
old <- dataset_master_copy[[column]]
new == old
list_of_matches <- c()
for(value in seq_along(predictions_boot_dot)){
set.seed(1234)
distance <- head(order(abs(predictions_boot_dot[value] - ifelse(is.na(dataset[[column]]), NA, predictions_full_hat))),5)
list_of_matches[value] <- ifelse(is.na(dataset[[column]]), NA, dataset[[column]])[sample(distance,1)]
}
dataset_master_copy[[column]]<- ifelse(is.na(dataset[[column]]), list_of_matches, dataset[[column]])
old <- dataset_master_copy[[column]]
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
for(value in seq_along(non_na_predictions)){
set.seed(1234)
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
dataset_master_copy[[column]][is.na(dataset[[column]])] <- list_of_matches
new <- dataset_master_copy[[column]]
new == old
sum (new == old)
value <- 1
ifelse(is.na(dataset[[column]]), NA, dataset[[column]])
is.na(dataset[[column]])
build(vignettes = FALSE)
load_all()
# If continuous, we can do matching
# Find the 5 closest donors and making a random draw from them - there are a lot of ways to do matching
# https://stefvanbuuren.name/fimd/sec-pmm.html#sec:pmmcomputation
# This matching was updated on 10/4 to help with speedup (15% reduction in time). We only match on missing values.
list_of_matches <- c()
non_na_predictions <- predictions_boot_dot[is.na(dataset[[column]])]
value <- 1
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])]), partial = 5), 5)
order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])]), partial = 5)
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])]), partial = 1:5), 5)
on_na_predictions[value]
non_na_predictions[value]
value
predictions_full_hat[!is.na(dataset[[column]])]
abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])
?order
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
distance
for(value in seq_along(non_na_predictions)){
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
for(value in seq_along(non_na_predictions)){
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
#list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
for(value in seq_along(non_na_predictions)){
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
for(value in seq_along(non_na_predictions)){
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
#list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
system.time(for(value in seq_along(non_na_predictions)){
distance <- head(order(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])])), 5)
#list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
})
system.time(          for(value in seq_along(non_na_predictions)){
distance <- head(sort.list(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])]), partial = 5), 5)
#list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
}
)
distance <- head(sort.list(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])]), partial = 1:5), 5)
system.time(for(value in seq_along(non_na_predictions)){
distance <- head(sort.int(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])]), partial = 1:5), 5)
#list_of_matches[value] <- dataset[[column]][!is.na(dataset[[column]])][sample(distance,1)]
})
head(sort.int(abs(non_na_predictions[value] - predictions_full_hat[!is.na(dataset[[column]])]), partial = 1:5), 5)
?sort.int
pt_idx <- sample(1:100, 5)
pt_idx
x <- sample(100)
x
sort(x, partial=pt_idx)[pt_idx] == sort(x)[pt_idx]
sort(x, partial = 1:5)
x
sort(x, partial = 1:100)
sort(x, partial = 5)
donors <- min(5, 100)
donors
donors <- max(donors, 1)
doors
donors
?order
library("misl")
xvars <- colnames(nhanes)
xvars
ignore_predictors <- "Weight"
reduced <- xvars[-which(xvars %in% ignore_predictors)]
reduced
ignore_predictors <- "Weights"
reduced <- xvars[-which(xvars %in% ignore_predictors)]
reduced
ignore_predictors <- "Weights"
reduced <- xvars[-which(xvars %in% ignore_predictors)]
reduced
xvars
ignore_predictors <- c("Weight")
reduced <- xvars[-which(xvars %in% ignore_predictors)]
reduced
ignore_predictors <- c("Weightas")
reduced <- xvars[-which(xvars %in% ignore_predictors)]
reduced
-which(xvars %in% ignore_predictors)
ignore_predictors <- c("Weight")
-which(xvars %in% ignore_predictors)
ignore_predictors <- c("Weight, Age")
ignore_predictors <- c("Weight", "Age")
reduced <- xvars[-which(xvars %in% ignore_predictors)]
reduced
