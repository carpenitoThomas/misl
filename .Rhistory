select(-c(Rings, Age))
abalone <- as_tibble(abalone)
sl3_list_learners("categorical")
cat_outcome <- "Sex"
cat_covars <- colnames(abalone)[-which(names(abalone) == cat_outcome)]
cat_covars
library("devtools")
getwd()
library(misl)
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = FALSE)})
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = FALSE)})
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = TRUE)})
load_all()
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = FALSE)})
library('sl3')
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = FALSE)})
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = TRUE)})
as.numeric(system("sysctl -n hw.physicalcpu", intern = TRUE))
?plan
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = FALSE, multisession = FALSE)})
!FALSE
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = FALSE, multisession = TRUE)})
load_all()
load_all()
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = FALSE)})
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = FALSE)})
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 2, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 5, quiet = TRUE, multisession = TRUE)})
library('future')
plan(multisession, 4)
plan(multisession, 4)
future::plan(future::multisession, workers = nworkers)
future::plan(future::multisession, workers = 8)
future::plan(future::multisession, workers = 8)
System.time(future::plan(future::multisession, workers = 8))
system.time(future::plan(future::multisession, workers = 8))
load_all()
## This is after single plan
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 5, quiet = TRUE, multisession = TRUE)})
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 2, quiet = TRUE, multisession = TRUE)})
?future
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 1, m = 1, quiet = TRUE, multisession = TRUE)})
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 1, m = 1, quiet = TRUE, multisession = TRUE)})
misl_imp
load_all()
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE, multisession = TRUE)})
load_all()
load_all()
system.time({misl_imp <- misl(nhanes, maxit = 5, m = 5, quiet = TRUE, multisession = TRUE)})
library("future")
availableCores()
# Sequential dataset processessing, paralell super learning
plan(list(
sequential,
tweak(multisession, workers = 8)
))
# Sequential dataset processessing, paralell super learning
plan(list(
sequentials,
tweak(multisession, workers = 8)
))
# Paralelle dataset processessing, sequential super learning
plan(list(tweak(multisession, workers = 8), sequential))
plan(list(tweak(multisession, workers = 8),tweak(multisession, workers = 8)))
?plan
t?delayed::Scheduler
?delayed::Scheduler
load_all()
library('devtools')
load_all()
plan(list(sequential,sequential))
Sys.time(misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = FALSE))
library(misl)
Sys.time(misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = FALSE))
Sys.time(misl_imp <- misl(nhanes, maxit = 2, m = 2, quiet = TRUE))
misl(nhanes, maxit = 2, m = 2, quiet = TRUE)
Sys.time({misl(nhanes, maxit = 2, m = 2, quiet = FALSE)})
Sys.time(misl(nhanes, maxit = 2, m = 2, quiet = FALSE))
Sys.time
?Sys.time
Sys.time({print("hi")})
System.time({misl(nhanes, maxit = 2, m = 2, quiet = FALSE)})
system.time({misl(nhanes, maxit = 2, m = 2, quiet = FALSE)})
?future::future_lapply
library('future')
?future::future_lapply
?future::future_apply
?future.apply::future_lapply
plan(list(sequential,sequential))
system.time({misl(nhanes, maxit = 2, m = 2, quiet = FALSE)})
system.time({misl(nhanes, maxit = 2, m = 2, quiet = TRUE)})
plan(list(sequential,tweak(multisession, workers = 3)))
system.time({misl(nhanes, maxit = 2, m = 2, quiet = TRUE)})
plan(list(tweak(multisession, workers = 2), sequential))
system.time({misl(nhanes, maxit = 2, m = 2, quiet = TRUE)})
262 - 256
262 - 172
plan(list(tweak(multisession, workers = 2),tweak(multisession, workers = 3)))
system.time({misl(nhanes, maxit = 2, m = 2, quiet = TRUE)})
build()
build_readme()
load("/Users/thomascarpenito/Documents/Northeastern/Dissertation/Firearm/Data/ICPSR_37694/DS0001/37694-0001-Data.rda")
View(da37694.0001)
View(head(da37694.0001))
colnames(da37694.0001)
unique(da37694.0001$DIAG)
head(da37694.0001$CMTX1)
library("packrat")
library('mice')
library('misl')
library('dplyr')
library("sl3")
abalone <- read.csv("abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
dplyr::mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- dplyr::tibble(abalone)
## 1. Generate a linear model predicting the outcome of interest
#### Whole_Weight = Sex + Length + Diameter + Height +  Older_12
original_model <- lm(Whole_Weight ~ Sex + Length + Diameter + Height + Older_12, data = abalone)
predictions <- predict(original_model)
## 2. Replace the outcome with the predicted values from the model
abalone_model_predictions <- abalone %>%
select(c(Length, Diameter, Height, Older_12))
abalone_model_predictions$Whole_Weight_Pred <- predictions
truth_model <- lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = abalone_model_predictions)
mypatterns <- expand.grid(Sex = 0:1, Length = 0:1, Diameter = 0:1, Height = 0:1, Older_12 = 0:1, Whole_Weight_Pred = 0:1)
mypatterns <- mypatterns[rowSums(mypatterns) != 0,]
## 3. Begin a loop (1000 times that...)
simulation <- function(runs = 2, multisession = FALSE){
# First, setup our results array
results <- array(NA, dim = c(3, runs, 3 ))
dimnames(results) <- list(c("Mean.Imp", "Mice.Imp", "Misl.Imp"),
as.character(1:runs),
c("Estimate", "2.5 %", "97.5 %")
)
# Next begin our run through each of the simulations
for(run in 1:runs){
# We begin first with amputing our data
amputed_mads <- ampute(abalone_model_predictions,
prop = .60,
patterns = mypatterns,
mech = "MCAR")
# We can then begin the imputation
amputed_data <- amputed_mads$amp
mean_imputations <- mice(amputed_data, method = "mean")
mice_imputations <- mice(amputed_data)
#plan(list(tweak(multisession, workers = 5),tweak(multisession, workers = 3)))
misl_imputations <- misl(amputed_data,
con_method = c("Lrnr_mean"),
bin_method = c("Lrnr_mean"),
cat_method = c("Lrnr_mean"))
#cat_method = c("Lrnr_mean", "Lrnr_glmnet", "Lrnr_independent_binomial", "Lrnr_randomForest"))
# We can then begin the fitting process
mean_fit <- with(mean_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
mice_fit <- with(mice_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
misl_fit <- lapply(misl_imputations, function(y){
stats::lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = y)
})
# The results can be pooled
mean_pool <- summary(mice::pool(mean_fit), conf.int = TRUE)
mice_pool <- summary(mice::pool(mice_fit), conf.int = TRUE)
misl_pool <- summary(mice::pool(misl_fit), conf.int = TRUE)
# Finally, we can append our results to the array
results[1, run,] <- as.numeric(mean_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[2, run,] <- as.numeric(mice_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[3, run,] <- as.numeric(misl_pool[4, c("estimate", "2.5 %", "97.5 %")])
}
results
}
simulation_results_multicore <- system.time(simulation(1, multisession = TRUE))
load_all()
library('devtools')
load_all()
library("packrat")
library('mice')
library('misl')
library('dplyr')
library("sl3")
abalone <- read.csv("abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
dplyr::mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- dplyr::tibble(abalone)
## 1. Generate a linear model predicting the outcome of interest
#### Whole_Weight = Sex + Length + Diameter + Height +  Older_12
original_model <- lm(Whole_Weight ~ Sex + Length + Diameter + Height + Older_12, data = abalone)
predictions <- predict(original_model)
## 2. Replace the outcome with the predicted values from the model
abalone_model_predictions <- abalone %>%
select(c(Length, Diameter, Height, Older_12))
abalone_model_predictions$Whole_Weight_Pred <- predictions
truth_model <- lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = abalone_model_predictions)
mypatterns <- expand.grid(Sex = 0:1, Length = 0:1, Diameter = 0:1, Height = 0:1, Older_12 = 0:1, Whole_Weight_Pred = 0:1)
mypatterns <- mypatterns[rowSums(mypatterns) != 0,]
## 3. Begin a loop (1000 times that...)
simulation <- function(runs = 2, multisession = FALSE){
# First, setup our results array
results <- array(NA, dim = c(3, runs, 3 ))
dimnames(results) <- list(c("Mean.Imp", "Mice.Imp", "Misl.Imp"),
as.character(1:runs),
c("Estimate", "2.5 %", "97.5 %")
)
# Next begin our run through each of the simulations
for(run in 1:runs){
# We begin first with amputing our data
amputed_mads <- ampute(abalone_model_predictions,
prop = .60,
patterns = mypatterns,
mech = "MCAR")
# We can then begin the imputation
amputed_data <- amputed_mads$amp
mean_imputations <- mice(amputed_data, method = "mean")
mice_imputations <- mice(amputed_data)
#plan(list(tweak(multisession, workers = 5),tweak(multisession, workers = 3)))
misl_imputations <- misl(amputed_data,
con_method = c("Lrnr_mean"),
bin_method = c("Lrnr_mean"),
cat_method = c("Lrnr_mean"))
#cat_method = c("Lrnr_mean", "Lrnr_glmnet", "Lrnr_independent_binomial", "Lrnr_randomForest"))
# We can then begin the fitting process
mean_fit <- with(mean_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
mice_fit <- with(mice_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
misl_fit <- lapply(misl_imputations, function(y){
stats::lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = y)
})
# The results can be pooled
mean_pool <- summary(mice::pool(mean_fit), conf.int = TRUE)
mice_pool <- summary(mice::pool(mice_fit), conf.int = TRUE)
misl_pool <- summary(mice::pool(misl_fit), conf.int = TRUE)
# Finally, we can append our results to the array
results[1, run,] <- as.numeric(mean_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[2, run,] <- as.numeric(mice_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[3, run,] <- as.numeric(misl_pool[4, c("estimate", "2.5 %", "97.5 %")])
}
results
}
simulation_results_multicore <- system.time(simulation(1, multisession = TRUE))
library("packrat")
library('mice')
library('misl')
library('dplyr')
library("sl3")
abalone <- read.csv("abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
dplyr::mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- dplyr::tibble(abalone)
## 1. Generate a linear model predicting the outcome of interest
#### Whole_Weight = Sex + Length + Diameter + Height +  Older_12
original_model <- lm(Whole_Weight ~ Sex + Length + Diameter + Height + Older_12, data = abalone)
predictions <- predict(original_model)
## 2. Replace the outcome with the predicted values from the model
abalone_model_predictions <- abalone %>%
select(c(Length, Diameter, Height, Older_12))
abalone_model_predictions$Whole_Weight_Pred <- predictions
truth_model <- lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = abalone_model_predictions)
mypatterns <- expand.grid(Sex = 0:1, Length = 0:1, Diameter = 0:1, Height = 0:1, Older_12 = 0:1, Whole_Weight_Pred = 0:1)
mypatterns <- mypatterns[rowSums(mypatterns) != 0,]
## 3. Begin a loop (1000 times that...)
simulation <- function(runs = 2, multisession = FALSE){
# First, setup our results array
results <- array(NA, dim = c(3, runs, 3 ))
dimnames(results) <- list(c("Mean.Imp", "Mice.Imp", "Misl.Imp"),
as.character(1:runs),
c("Estimate", "2.5 %", "97.5 %")
)
# Next begin our run through each of the simulations
for(run in 1:runs){
# We begin first with amputing our data
amputed_mads <- ampute(abalone_model_predictions,
prop = .60,
patterns = mypatterns,
mech = "MCAR")
# We can then begin the imputation
amputed_data <- amputed_mads$amp
mean_imputations <- mice(amputed_data, method = "mean")
mice_imputations <- mice(amputed_data)
#plan(list(tweak(multisession, workers = 5),tweak(multisession, workers = 3)))
misl_imputations <- misl(amputed_data,
con_method = c("Lrnr_mean"),
bin_method = c("Lrnr_mean"),
cat_method = c("Lrnr_mean"))
#cat_method = c("Lrnr_mean", "Lrnr_glmnet", "Lrnr_independent_binomial", "Lrnr_randomForest"))
# We can then begin the fitting process
mean_fit <- with(mean_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
mice_fit <- with(mice_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
misl_fit <- lapply(misl_imputations, function(y){
stats::lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = y)
})
# The results can be pooled
mean_pool <- summary(mice::pool(mean_fit), conf.int = TRUE)
mice_pool <- summary(mice::pool(mice_fit), conf.int = TRUE)
misl_pool <- summary(mice::pool(misl_fit), conf.int = TRUE)
# Finally, we can append our results to the array
results[1, run,] <- as.numeric(mean_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[2, run,] <- as.numeric(mice_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[3, run,] <- as.numeric(misl_pool[4, c("estimate", "2.5 %", "97.5 %")])
}
results
}
library("packrat")
library('mice')
library('misl')
library('dplyr')
library("sl3")
abalone <- read.csv("abalone.data", header=FALSE)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
dplyr::mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- dplyr::tibble(abalone)
data(abalone)
abalone
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
dplyr::mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- dplyr::tibble(abalone)
original_model <- lm(Whole_Weight ~ Sex + Length + Diameter + Height + Older_12, data = abalone)
predictions <- predict(original_model)
## 2. Replace the outcome with the predicted values from the model
abalone_model_predictions <- abalone %>%
select(c(Length, Diameter, Height, Older_12))
abalone_model_predictions$Whole_Weight_Pred <- predictions
truth_model <- lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = abalone_model_predictions)
mypatterns <- expand.grid(Sex = 0:1, Length = 0:1, Diameter = 0:1, Height = 0:1, Older_12 = 0:1, Whole_Weight_Pred = 0:1)
mypatterns <- mypatterns[rowSums(mypatterns) != 0,]
abalone_model_predictions <- abalone %>%
select(c(Sex, Length, Diameter, Height, Older_12))
abalone_model_predictions$Whole_Weight_Pred <- predictions
truth_model <- lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = abalone_model_predictions)
mypatterns <- expand.grid(Sex = 0:1, Length = 0:1, Diameter = 0:1, Height = 0:1, Older_12 = 0:1, Whole_Weight_Pred = 0:1)
mypatterns <- mypatterns[rowSums(mypatterns) != 0,]
simulation <- function(runs = 2, multisession = FALSE){
# First, setup our results array
results <- array(NA, dim = c(3, runs, 3 ))
dimnames(results) <- list(c("Mean.Imp", "Mice.Imp", "Misl.Imp"),
as.character(1:runs),
c("Estimate", "2.5 %", "97.5 %")
)
# Next begin our run through each of the simulations
for(run in 1:runs){
# We begin first with amputing our data
amputed_mads <- ampute(abalone_model_predictions,
prop = .60,
patterns = mypatterns,
mech = "MCAR")
# We can then begin the imputation
amputed_data <- amputed_mads$amp
mean_imputations <- mice(amputed_data, method = "mean")
mice_imputations <- mice(amputed_data)
#plan(list(tweak(multisession, workers = 5),tweak(multisession, workers = 3)))
misl_imputations <- misl(amputed_data,
con_method = c("Lrnr_mean"),
bin_method = c("Lrnr_mean"),
cat_method = c("Lrnr_mean"))
#cat_method = c("Lrnr_mean", "Lrnr_glmnet", "Lrnr_independent_binomial", "Lrnr_randomForest"))
# We can then begin the fitting process
mean_fit <- with(mean_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
mice_fit <- with(mice_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
misl_fit <- lapply(misl_imputations, function(y){
stats::lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = y)
})
# The results can be pooled
mean_pool <- summary(mice::pool(mean_fit), conf.int = TRUE)
mice_pool <- summary(mice::pool(mice_fit), conf.int = TRUE)
misl_pool <- summary(mice::pool(misl_fit), conf.int = TRUE)
# Finally, we can append our results to the array
results[1, run,] <- as.numeric(mean_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[2, run,] <- as.numeric(mice_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[3, run,] <- as.numeric(misl_pool[4, c("estimate", "2.5 %", "97.5 %")])
}
results
}
simulation_results_multicore <- system.time(simulation(1, multisession = TRUE))
simulation_results_multicore
load_all()
?mice
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shuck_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
abalone <- abalone %>%
dplyr::mutate(Age = Rings + 1.5,
Sex = as.factor(Sex),
Older_12 = as.integer(Age > 12)
) %>%
select(-c(Rings, Age))
abalone <- dplyr::tibble(abalone)
## 1. Generate a linear model predicting the outcome of interest
#### Whole_Weight = Sex + Length + Diameter + Height +  Older_12
original_model <- lm(Whole_Weight ~ Sex + Length + Diameter + Height + Older_12, data = abalone)
predictions <- predict(original_model)
## 2. Replace the outcome with the predicted values from the model
abalone_model_predictions <- abalone %>%
select(c(Sex, Length, Diameter, Height, Older_12))
abalone_model_predictions$Whole_Weight_Pred <- predictions
truth_model <- lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = abalone_model_predictions)
mypatterns <- expand.grid(Sex = 0:1, Length = 0:1, Diameter = 0:1, Height = 0:1, Older_12 = 0:1, Whole_Weight_Pred = 0:1)
mypatterns <- mypatterns[rowSums(mypatterns) != 0,]
## 3. Begin a loop (1000 times that...)
simulation <- function(runs = 2){
# First, setup our results array
results <- array(NA, dim = c(3, runs, 3 ))
dimnames(results) <- list(c("Mean.Imp", "Mice.Imp", "Misl.Imp"),
as.character(1:runs),
c("Estimate", "2.5 %", "97.5 %")
)
# Next begin our run through each of the simulations
for(run in 1:runs){
# We begin first with amputing our data
amputed_mads <- ampute(abalone_model_predictions,
prop = .60,
patterns = mypatterns,
mech = "MCAR")
# We can then begin the imputation
amputed_data <- amputed_mads$amp
mean_imputations <- mice(amputed_data, method = "mean", print = FALSE)
mice_imputations <- mice(amputed_data, print = FALSE)
#plan(list(tweak(multisession, workers = 5),tweak(multisession, workers = 3)))
misl_imputations <- misl(amputed_data,
con_method = c("Lrnr_mean"),
bin_method = c("Lrnr_mean"),
cat_method = c("Lrnr_mean"))
#cat_method = c("Lrnr_mean", "Lrnr_glmnet", "Lrnr_independent_binomial", "Lrnr_randomForest"))
# We can then begin the fitting process
mean_fit <- with(mean_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
mice_fit <- with(mice_imputations, exp = lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12))
misl_fit <- lapply(misl_imputations, function(y){
stats::lm(Whole_Weight_Pred ~ Sex + Length + Diameter + Height + Older_12, data = y)
})
# The results can be pooled
mean_pool <- summary(mice::pool(mean_fit), conf.int = TRUE)
mice_pool <- summary(mice::pool(mice_fit), conf.int = TRUE)
misl_pool <- summary(mice::pool(misl_fit), conf.int = TRUE)
# Finally, we can append our results to the array
results[1, run,] <- as.numeric(mean_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[2, run,] <- as.numeric(mice_pool[4, c("estimate", "2.5 %", "97.5 %")])
results[3, run,] <- as.numeric(misl_pool[4, c("estimate", "2.5 %", "97.5 %")])
}
results
}
simulation_results_multicore <- system.time(simulation(1))
simulation_results_multicore
system.time(simulation(2))
plan(list(tweak(multisession, workers = 5), sequential))
simulation_results_multicore <- system.time(simulation(1))
library("future")
plan(list(tweak(multisession, workers = 5), sequential))
simulation_results_multicore <- system.time(simulation(1))
simulation_results_multicore
?install_github
load("/Users/thomascarpenito/Downloads/simulation_results_multicore.Rdata")
simulation_results_multicore
load("/Users/thomascarpenito/Downloads/simulation_results_multicore (1).Rdata")
simulation_results_multicore
load("/Users/thomascarpenito/Downloads/simulation_results_multicore (2).Rdata")
simulation_results_multicore
load("/Users/thomascarpenito/Downloads/simulation_results_multicore (3).Rdata")
simulation_results_multicore
load("/Users/thomascarpenito/Downloads/simulation_results_multicore (5).Rdata")
simulation_results_multicore
238 - 50
188 / 60
238 / 60
load("/Users/thomascarpenito/Downloads/simulation_results_multicore (6).Rdata")
load("/Users/thomascarpenito/Downloads/simulation_results_multicore (7).Rdata")
# Original learners...
simulation_results_multicore
load("/Users/thomascarpenito/Downloads/simulation_results_multicore_more.Rdata")
load("/Users/thomascarpenito/Downloads/simulation_results_multicore (8).Rdata")
simulation_results_multicore_more
load("/Users/thomascarpenito/Downloads/simulation_results_multicore.Rdata")
simulation_results_multicore
41.92/60
(41.92/60)*1000
(41.92/60/60)*1000
((41.92/60/60)*1000)/2
((41.92/60/60)*200)/2
